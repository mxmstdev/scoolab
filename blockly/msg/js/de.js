// This file was automatically generated.  Do not modify.

'use strict';

const messages = Object.create(null);

messages["ADD_COMMENT"] = "Kommentar hinzufügen";
messages["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Die Variable „%1“ kann nicht gelöscht werden, da sie Teil der Definition der Funktion „%2“ ist.";
messages["CHANGE_VALUE_TITLE"] = "Wert ändern:";
messages["CLEAN_UP"] = "Bausteine aufräumen";
messages["COLLAPSED_WARNINGS_WARNING"] = "Eingeklappte Blöcke enthalten Warnungen.";
messages["COLLAPSE_ALL"] = "Alle Bausteine zusammenfalten";
messages["COLLAPSE_BLOCK"] = "Baustein zusammenfalten";
messages["COLOUR_BLEND_COLOUR1"] = "Farbe 1";
messages["COLOUR_BLEND_COLOUR2"] = "und Farbe 2";
messages["COLOUR_BLEND_HELPURL"] = "https://meyerweb.com/eric/tools/color-blend/#:::rgbp";
messages["COLOUR_BLEND_RATIO"] = "im Verhältnis";
messages["COLOUR_BLEND_TITLE"] = "mische";
messages["COLOUR_BLEND_TOOLTIP"] = "Vermischt 2 Farben mit konfigurierbarem Farbverhältnis (0.0 - 1.0).";
messages["COLOUR_PICKER_HELPURL"] = "https://de.wikipedia.org/wiki/Farbe";
messages["COLOUR_PICKER_TOOLTIP"] = "Wählt eine Farbe aus der Palette aus.";
messages["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
messages["COLOUR_RANDOM_TITLE"] = "zufällige Farbe";
messages["COLOUR_RANDOM_TOOLTIP"] = "Erzeugt eine Farbe nach dem Zufallsprinzip.";
messages["COLOUR_RGB_BLUE"] = "blau";
messages["COLOUR_RGB_GREEN"] = "grün";
messages["COLOUR_RGB_HELPURL"] = "https://www.december.com/html/spec/colorpercompact.html";
messages["COLOUR_RGB_RED"] = "rot";
messages["COLOUR_RGB_TITLE"] = "Farbe aus";
messages["COLOUR_RGB_TOOLTIP"] = "Erzeugt eine Farbe mit selbst definierten Rot-, Grün- und Blauwerten. Alle Werte müssen zwischen 0 und 100 liegen.";
messages["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://de.wikipedia.org/wiki/Kontrollstruktur";
messages["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "die Schleife abbrechen";
messages["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "sofort mit nächstem Schleifendurchlauf fortfahren";
messages["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Die umgebende Schleife beenden.";
messages["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Diese Anweisung abbrechen und mit dem nächsten Schleifendurchlauf fortfahren.";
messages["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Warnung: Dieser Baustein kann nur in einer Schleife verwendet werden.";
messages["CONTROLS_FOREACH_HELPURL"] = "https://de.wikipedia.org/wiki/For-Schleife";
messages["CONTROLS_FOREACH_TITLE"] = "für jeden Wert %1 aus der Liste %2";
messages["CONTROLS_FOREACH_TOOLTIP"] = "Führt eine Anweisung für jeden Wert in der Liste aus und setzt dabei die Variable \"%1\" auf den aktuellen Listenwert.";
messages["CONTROLS_FOR_HELPURL"] = "https://de.wikipedia.org/wiki/For-Schleife";
messages["CONTROLS_FOR_TITLE"] = "zähle %1 von %2 bis %3 in Schritten von %4";
messages["CONTROLS_FOR_TOOLTIP"] = "Zählt die Variable \"%1\" von einem Startwert bis zu einem Endwert und führt für jeden Wert eine Anweisung aus.";
messages["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Eine weitere Bedingung hinzufügen.";
messages["CONTROLS_IF_ELSE_TOOLTIP"] = "Eine sonst-Bedingung hinzufügen. Führt eine Anweisung aus, falls keine Bedingung zutrifft.";
messages["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
messages["CONTROLS_IF_IF_TOOLTIP"] = "Hinzufügen, entfernen oder sortieren von Sektionen";
messages["CONTROLS_IF_MSG_ELSE"] = "sonst";
messages["CONTROLS_IF_MSG_ELSEIF"] = "sonst falls";
messages["CONTROLS_IF_MSG_IF"] = "falls";
messages["CONTROLS_IF_TOOLTIP_1"] = "Führt eine Anweisung aus, falls eine Bedingung wahr ist.";
messages["CONTROLS_IF_TOOLTIP_2"] = "Führt die erste Anweisung aus, falls eine Bedingung wahr ist.  Führt ansonsten die zweite Anweisung aus.";
messages["CONTROLS_IF_TOOLTIP_3"] = "Führt die erste Anweisung aus, falls die erste Bedingung wahr ist.  Führt ansonsten die zweite Anweisung aus, falls die zweite Bedingung wahr ist.";
messages["CONTROLS_IF_TOOLTIP_4"] = "Führe die erste Anweisung aus, falls die erste Bedingung wahr ist.  Führt ansonsten die zweite Anweisung aus, falls die zweite Bedingung wahr ist.  Führt die dritte Anweisung aus, falls keine der beiden Bedingungen wahr ist";
messages["CONTROLS_REPEAT_HELPURL"] = "https://de.wikipedia.org/wiki/For-Schleife";
messages["CONTROLS_REPEAT_INPUT_DO"] = "mache";
messages["CONTROLS_REPEAT_TITLE"] = "wiederhole %1 mal:";
messages["CONTROLS_REPEAT_TOOLTIP"] = "Eine Anweisung mehrfach ausführen.";
messages["CONTROLS_WHILEUNTIL_HELPURL"] = "https://de.wikipedia.org/wiki/Schleife_%28Programmierung%29";
messages["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "wiederhole bis";
messages["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "wiederhole solange";
messages["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Führt Anweisungen aus solange die Bedingung unwahr ist.";
messages["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Führt Anweisungen aus solange die Bedingung wahr ist.";
messages["DELETE_ALL_BLOCKS"] = "Alle %1 Bausteine löschen?";
messages["DELETE_BLOCK"] = "Baustein löschen";
messages["DELETE_VARIABLE"] = "Die Variable „%1“ löschen";
messages["DELETE_VARIABLE_CONFIRMATION"] = "%1 Verwendungen der Variable „%2“ löschen?";
messages["DELETE_X_BLOCKS"] = "%1 Bausteine löschen";
messages["DIALOG_CANCEL"] = "Abbrechen";
messages["DIALOG_OK"] = "OK";
messages["DISABLE_BLOCK"] = "Baustein deaktivieren";
messages["DUPLICATE_BLOCK"] = "Kopieren";
messages["DUPLICATE_COMMENT"] = "Kommentar duplizieren";
messages["ENABLE_BLOCK"] = "Baustein aktivieren";
messages["EXPAND_ALL"] = "Alle Bausteine entfalten";
messages["EXPAND_BLOCK"] = "Baustein entfalten";
messages["EXTERNAL_INPUTS"] = "externe Eingänge";
messages["HELP"] = "Hilfe";
messages["INLINE_INPUTS"] = "interne Eingänge";
messages["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
messages["LISTS_CREATE_EMPTY_TITLE"] = "erzeuge eine leere Liste";
messages["LISTS_CREATE_EMPTY_TOOLTIP"] = "Erzeugt eine leere Liste ohne Inhalt.";
messages["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "Liste";
messages["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Hinzufügen, entfernen und sortieren von Elementen.";
messages["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
messages["LISTS_CREATE_WITH_INPUT_WITH"] = "erzeuge Liste mit";
messages["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Ein Element zur Liste hinzufügen.";
messages["LISTS_CREATE_WITH_TOOLTIP"] = "Erzeugt eine Liste aus den angegebenen Elementen.";
messages["LISTS_GET_INDEX_FIRST"] = "Erste";
messages["LISTS_GET_INDEX_FROM_END"] = "von hinten das";
messages["LISTS_GET_INDEX_FROM_START"] = "das";
messages["LISTS_GET_INDEX_GET"] = "nimm";
messages["LISTS_GET_INDEX_GET_REMOVE"] = "nimm und entferne";
messages["LISTS_GET_INDEX_LAST"] = "Letzte";
messages["LISTS_GET_INDEX_RANDOM"] = "Zufällig";
messages["LISTS_GET_INDEX_REMOVE"] = "entferne";
messages["LISTS_GET_INDEX_TAIL"] = "Element";
messages["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Extrahiert das erste Element aus der Liste.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Extrahiert das Element an der angegebenen Position in der Liste.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Extrahiert das letzte Element aus der Liste.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Extrahiert ein zufälliges Element aus der Liste.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Extrahiert und entfernt das erste Element aus der Liste.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Extrahiert und entfernt das Element an der angegebenen Position aus der Liste.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Extrahiert und entfernt das letzte Element aus der Liste.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Extrahiert und entfernt ein zufälliges Element aus der Liste.";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Entfernt das erste Element aus der Liste.";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Entfernt das Element an der angegebenen Position aus der Liste.";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Entfernt das letzte Element aus der Liste.";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Entfernt ein zufälliges Element aus der Liste.";
messages["LISTS_GET_SUBLIST_END_FROM_END"] = "bis von hinten";
messages["LISTS_GET_SUBLIST_END_FROM_START"] = "bis";
messages["LISTS_GET_SUBLIST_END_LAST"] = "bis letztes";
messages["LISTS_GET_SUBLIST_HELPURL"] = "http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8l.doc%2Flanguage%2Fref%2Farsubex.htm";
messages["LISTS_GET_SUBLIST_START_FIRST"] = "nimm Teilliste ab erstes";
messages["LISTS_GET_SUBLIST_START_FROM_END"] = "nimm Teilliste ab von hinten";
messages["LISTS_GET_SUBLIST_START_FROM_START"] = "nimm Teilliste ab";
messages["LISTS_GET_SUBLIST_TAIL"] = "Element";
messages["LISTS_GET_SUBLIST_TOOLTIP"] = "Erstellt eine Kopie mit dem angegebenen Abschnitt der Liste.";
messages["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 ist das letzte Element.";
messages["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 ist das erste Element.";
messages["LISTS_INDEX_OF_FIRST"] = "suche erstes Auftreten von";
messages["LISTS_INDEX_OF_HELPURL"] = "http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8l.doc%2Flanguage%2Fref%2Farsubex.htm";
messages["LISTS_INDEX_OF_LAST"] = "suche letztes Auftreten von";
messages["LISTS_INDEX_OF_TOOLTIP"] = "Sucht die Position (Index) eines Elementes in der Liste. Gibt %1 zurück, falls kein Element gefunden wurde.";
messages["LISTS_INLIST"] = "in der Liste";
messages["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
messages["LISTS_ISEMPTY_TITLE"] = "%1 ist leer";
messages["LISTS_ISEMPTY_TOOLTIP"] = "Ist wahr, falls die Liste leer ist.";
messages["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
messages["LISTS_LENGTH_TITLE"] = "Länge von %1";
messages["LISTS_LENGTH_TOOLTIP"] = "Die Anzahl von Elementen in der Liste.";
messages["LISTS_REPEAT_HELPURL"] = "http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8l.doc%2Flanguage%2Fref%2Farsubex.htm";
messages["LISTS_REPEAT_TITLE"] = "erzeuge Liste mit %2 mal dem Element %1​";
messages["LISTS_REPEAT_TOOLTIP"] = "Erzeugt eine Liste mit einer variablen Anzahl von Elementen";
messages["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
messages["LISTS_REVERSE_MESSAGE0"] = "kehre %1 um";
messages["LISTS_REVERSE_TOOLTIP"] = "Kehre eine Kopie einer Liste um.";
messages["LISTS_SET_INDEX_HELPURL"] = "http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8l.doc%2Flanguage%2Fref%2Farsubex.htm";
messages["LISTS_SET_INDEX_INPUT_TO"] = "ein";
messages["LISTS_SET_INDEX_INSERT"] = "füge als";
messages["LISTS_SET_INDEX_SET"] = "setze für";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Fügt das Element an den Anfang der Liste an.";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Fügt das Element an der angegebenen Position in die Liste ein.";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Fügt das Element ans Ende der Liste an.";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Fügt das Element zufällig in die Liste ein.";
messages["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Setzt das erste Element in der Liste.";
messages["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Setzt das Element an der angegebenen Position in der Liste.";
messages["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Setzt das letzte Element in die Liste.";
messages["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Setzt ein zufälliges Element in der Liste.";
messages["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
messages["LISTS_SORT_ORDER_ASCENDING"] = "aufsteigend";
messages["LISTS_SORT_ORDER_DESCENDING"] = "absteigend";
messages["LISTS_SORT_TITLE"] = "%1 %2 %3 sortieren";
messages["LISTS_SORT_TOOLTIP"] = "Eine Kopie einer Liste sortieren.";
messages["LISTS_SORT_TYPE_IGNORECASE"] = "alphabetisch, Großschreibung ignorieren";
messages["LISTS_SORT_TYPE_NUMERIC"] = "numerisch";
messages["LISTS_SORT_TYPE_TEXT"] = "alphabetisch";
messages["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
messages["LISTS_SPLIT_LIST_FROM_TEXT"] = "Liste aus Text erstellen";
messages["LISTS_SPLIT_TEXT_FROM_LIST"] = "Text aus Liste erstellen";
messages["LISTS_SPLIT_TOOLTIP_JOIN"] = "Liste mit Texten in einen Text vereinen, getrennt durch ein Trennzeichen.";
messages["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Text in eine Liste mit Texten aufteilen, unterbrochen bei jedem Trennzeichen.";
messages["LISTS_SPLIT_WITH_DELIMITER"] = "mit Trennzeichen";
messages["LOGIC_BOOLEAN_FALSE"] = "falsch";
messages["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
messages["LOGIC_BOOLEAN_TOOLTIP"] = "Ist entweder wahr oder falsch";
messages["LOGIC_BOOLEAN_TRUE"] = "wahr";
messages["LOGIC_COMPARE_HELPURL"] = "https://de.wikipedia.org/wiki/Vergleich_%28Zahlen%29";
messages["LOGIC_COMPARE_TOOLTIP_EQ"] = "Ist wahr, falls beide Werte gleich sind.";
messages["LOGIC_COMPARE_TOOLTIP_GT"] = "Ist wahr, falls der erste Wert größer als der zweite Wert ist.";
messages["LOGIC_COMPARE_TOOLTIP_GTE"] = "Ist wahr, falls der erste Wert größer als oder gleich groß wie der zweite Wert ist.";
messages["LOGIC_COMPARE_TOOLTIP_LT"] = "Ist wahr, falls der erste Wert kleiner als der zweite Wert ist.";
messages["LOGIC_COMPARE_TOOLTIP_LTE"] = "Ist wahr, falls der erste Wert kleiner als oder gleich groß wie der zweite Wert ist.";
messages["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Ist wahr, falls beide Werte unterschiedlich sind.";
messages["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
messages["LOGIC_NEGATE_TITLE"] = "nicht %1";
messages["LOGIC_NEGATE_TOOLTIP"] = "Ist wahr, falls der Eingabewert unwahr ist.  Ist unwahr, falls der Eingabewert wahr ist.";
messages["LOGIC_NULL"] = "null";
messages["LOGIC_NULL_HELPURL"] = "https://de.wikipedia.org/wiki/Nullwert";
messages["LOGIC_NULL_TOOLTIP"] = "Ist \"null\".";
messages["LOGIC_OPERATION_AND"] = "und";
messages["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
messages["LOGIC_OPERATION_OR"] = "oder";
messages["LOGIC_OPERATION_TOOLTIP_AND"] = "Ist wahr, falls beide Werte wahr sind.";
messages["LOGIC_OPERATION_TOOLTIP_OR"] = "Ist wahr, falls einer der beiden Werte wahr ist.";
messages["LOGIC_TERNARY_CONDITION"] = "prüfe";
messages["LOGIC_TERNARY_HELPURL"] = "https://de.wikipedia.org/wiki/%3F:#Auswahloperator";
messages["LOGIC_TERNARY_IF_FALSE"] = "falls falsch";
messages["LOGIC_TERNARY_IF_TRUE"] = "falls wahr";
messages["LOGIC_TERNARY_TOOLTIP"] = "Überprüft eine Bedingung \"prüfe\". Falls die Bedingung wahr ist, wird der \"falls wahr\" Wert zurückgegeben, andernfalls der \"falls unwahr\" Wert";
messages["MATH_ADDITION_SYMBOL"] = "+";  // untranslated
messages["MATH_ARITHMETIC_HELPURL"] = "https://de.wikipedia.org/wiki/Grundrechenart";
messages["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Ist die Summe zweier Zahlen.";
messages["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Ist der Quotient zweier Zahlen.";
messages["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Ist die Differenz zweier Zahlen.";
messages["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Ist das Produkt zweier Zahlen.";
messages["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Ist die erste Zahl potenziert mit der zweiten Zahl.";
messages["MATH_ATAN2_HELPURL"] = "https://de.wikipedia.org/wiki/Arctan2";
messages["MATH_ATAN2_TITLE"] = "atan2 von X:%1 Y:%2";
messages["MATH_ATAN2_TOOLTIP"] = "Gibt den Arkustangens des Punktes (X, Y) in Grad von -180 bis 180 zurück.";
messages["MATH_CHANGE_HELPURL"] = "https://de.wikipedia.org/wiki/Inkrement_und_Dekrement";
messages["MATH_CHANGE_TITLE"] = "erhöhe %1 um %2";
messages["MATH_CHANGE_TOOLTIP"] = "Addiert eine Zahl zu \"%1\".";
messages["MATH_CONSTANT_HELPURL"] = "https://de.wikipedia.org/wiki/Mathematische_Konstante";
messages["MATH_CONSTANT_TOOLTIP"] = "Mathematische Konstanten wie: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…) oder ∞ (unendlich).";
messages["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
messages["MATH_CONSTRAIN_TITLE"] = "begrenze %1 zwischen %2 und %3";
messages["MATH_CONSTRAIN_TOOLTIP"] = "Begrenzt eine Zahl auf den Wertebereich zwischen zwei anderen Zahlen (inklusiv).";
messages["MATH_DIVISION_SYMBOL"] = "÷";  // untranslated
messages["MATH_IS_DIVISIBLE_BY"] = "ist teilbar durch";
messages["MATH_IS_EVEN"] = "ist gerade";
messages["MATH_IS_NEGATIVE"] = "ist negativ";
messages["MATH_IS_ODD"] = "ist ungerade";
messages["MATH_IS_POSITIVE"] = "ist positiv";
messages["MATH_IS_PRIME"] = "ist eine Primzahl";
messages["MATH_IS_TOOLTIP"] = "Überprüft ob eine Zahl gerade, ungerade, eine Primzahl, ganzzahlig, positiv, negativ oder durch eine zweite Zahl teilbar ist.  Gibt wahr oder falsch zurück.";
messages["MATH_IS_WHOLE"] = "ist eine ganze Zahl";
messages["MATH_MODULO_HELPURL"] = "https://de.wikipedia.org/wiki/Modulo";
messages["MATH_MODULO_TITLE"] = "Rest von %1 ÷ %2";
messages["MATH_MODULO_TOOLTIP"] = "Der Rest nach einer Division.";
messages["MATH_MULTIPLICATION_SYMBOL"] = "×";  // untranslated
messages["MATH_NUMBER_HELPURL"] = "https://de.wikipedia.org/wiki/Zahl";
messages["MATH_NUMBER_TOOLTIP"] = "Eine Zahl.";
messages["MATH_ONLIST_HELPURL"] = "http://www.sysplus.ch/einstieg.php?links=menu&seite=4125&grad=Crash&prog=Excel";
messages["MATH_ONLIST_OPERATOR_AVERAGE"] = "Mittelwert der Liste";
messages["MATH_ONLIST_OPERATOR_MAX"] = "Maximalwert der Liste";
messages["MATH_ONLIST_OPERATOR_MEDIAN"] = "Median der Liste";
messages["MATH_ONLIST_OPERATOR_MIN"] = "Minimalwert der Liste";
messages["MATH_ONLIST_OPERATOR_MODE"] = "am häufigsten in der Liste";
messages["MATH_ONLIST_OPERATOR_RANDOM"] = "Zufallswert aus der Liste";
messages["MATH_ONLIST_OPERATOR_STD_DEV"] = "Standardabweichung der Liste";
messages["MATH_ONLIST_OPERATOR_SUM"] = "Summe über die Liste";
messages["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Ist der Durchschnittswert aller Zahlen in einer Liste.";
messages["MATH_ONLIST_TOOLTIP_MAX"] = "Ist die größte Zahl in einer Liste.";
messages["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Ist der Median aller Zahlen in einer Liste.";
messages["MATH_ONLIST_TOOLTIP_MIN"] = "Ist die kleinste Zahl in einer Liste.";
messages["MATH_ONLIST_TOOLTIP_MODE"] = "Findet die Werte mit dem häufigstem Vorkommen in der Liste.";
messages["MATH_ONLIST_TOOLTIP_RANDOM"] = "Gibt einen zufälligen Wert aus der Liste zurück.";
messages["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Ist die Standardabweichung aller Werte in der Liste.";
messages["MATH_ONLIST_TOOLTIP_SUM"] = "Ist die Summe aller Zahlen in einer Liste.";
messages["MATH_POWER_SYMBOL"] = "^";  // untranslated
messages["MATH_RANDOM_FLOAT_HELPURL"] = "https://de.wikipedia.org/wiki/Zufallszahlen";
messages["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "Zufallszahl (0.0 - 1.0)";
messages["MATH_RANDOM_FLOAT_TOOLTIP"] = "Erzeugt eine Zufallszahl zwischen 0.0 (inklusiv) und 1.0 (exklusiv).";
messages["MATH_RANDOM_INT_HELPURL"] = "https://de.wikipedia.org/wiki/Zufallszahlen";
messages["MATH_RANDOM_INT_TITLE"] = "ganzzahlige Zufallszahl zwischen %1 und %2";
messages["MATH_RANDOM_INT_TOOLTIP"] = "Erzeugt eine ganzzahlige Zufallszahl zwischen zwei Zahlen (inklusiv).";
messages["MATH_ROUND_HELPURL"] = "https://de.wikipedia.org/wiki/Runden";
messages["MATH_ROUND_OPERATOR_ROUND"] = "runde";
messages["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "runde ab";
messages["MATH_ROUND_OPERATOR_ROUNDUP"] = "runde auf";
messages["MATH_ROUND_TOOLTIP"] = "Eine Zahl auf- oder abrunden.";
messages["MATH_SINGLE_HELPURL"] = "https://de.wikipedia.org/wiki/Quadratwurzel";
messages["MATH_SINGLE_OP_ABSOLUTE"] = "Betrag";
messages["MATH_SINGLE_OP_ROOT"] = "Quadratwurzel";
messages["MATH_SINGLE_TOOLTIP_ABS"] = "Ist der Betrag einer Zahl.";
messages["MATH_SINGLE_TOOLTIP_EXP"] = "Ist Wert der Exponentialfunktion einer Zahl.";
messages["MATH_SINGLE_TOOLTIP_LN"] = "Ist der natürliche Logarithmus einer Zahl.";
messages["MATH_SINGLE_TOOLTIP_LOG10"] = "Ist der dekadische Logarithmus einer Zahl.";
messages["MATH_SINGLE_TOOLTIP_NEG"] = "Negiert eine Zahl.";
messages["MATH_SINGLE_TOOLTIP_POW10"] = "Rechnet 10 hoch eine Zahl.";
messages["MATH_SINGLE_TOOLTIP_ROOT"] = "Ist die Quadratwurzel einer Zahl.";
messages["MATH_SUBTRACTION_SYMBOL"] = "-";  // untranslated
messages["MATH_TRIG_ACOS"] = "acos";  // untranslated
messages["MATH_TRIG_ASIN"] = "asin";  // untranslated
messages["MATH_TRIG_ATAN"] = "atan";  // untranslated
messages["MATH_TRIG_COS"] = "cos";  // untranslated
messages["MATH_TRIG_HELPURL"] = "https://de.wikipedia.org/wiki/Trigonometrie";
messages["MATH_TRIG_SIN"] = "sin";  // untranslated
messages["MATH_TRIG_TAN"] = "tan";  // untranslated
messages["MATH_TRIG_TOOLTIP_ACOS"] = "Ist der Arkuskosinus des Eingabewertes.";
messages["MATH_TRIG_TOOLTIP_ASIN"] = "Ist der Arkussinus des Eingabewertes.";
messages["MATH_TRIG_TOOLTIP_ATAN"] = "Ist der Arkustangens des Eingabewertes.";
messages["MATH_TRIG_TOOLTIP_COS"] = "Ist der Kosinus des Winkels.";
messages["MATH_TRIG_TOOLTIP_SIN"] = "Ist der Sinus des Winkels (nicht Radiant).";
messages["MATH_TRIG_TOOLTIP_TAN"] = "Ist der Tangens des Winkels (nicht Radiant).";
messages["NEW_COLOUR_VARIABLE"] = "Farbvariable erstellen …";
messages["NEW_NUMBER_VARIABLE"] = "Zahlenvariable erstellen …";
messages["NEW_STRING_VARIABLE"] = "Zeichenfolgenvariable erstellen …";
messages["NEW_VARIABLE"] = "Variable erstellen …";
messages["NEW_VARIABLE_TITLE"] = "Name der neuen Variable:";
messages["NEW_VARIABLE_TYPE_TITLE"] = "Neuer Variablentyp:";
messages["ORDINAL_NUMBER_SUFFIX"] = ".";
messages["PROCEDURES_ALLOW_STATEMENTS"] = "Anweisungen erlauben";
messages["PROCEDURES_BEFORE_PARAMS"] = "mit:";
messages["PROCEDURES_CALLNORETURN_HELPURL"] = "https://de.wikipedia.org/wiki/Unterprogramm";
messages["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Rufe einen Funktionsblock ohne Rückgabewert auf.";
messages["PROCEDURES_CALLRETURN_HELPURL"] = "https://de.wikipedia.org/wiki/Unterprogramm";
messages["PROCEDURES_CALLRETURN_TOOLTIP"] = "Rufe einen Funktionsblock mit Rückgabewert auf.";
messages["PROCEDURES_CALL_BEFORE_PARAMS"] = "mit:";
messages["PROCEDURES_CREATE_DO"] = "Erzeuge \"Aufruf %1\"";
messages["PROCEDURES_DEFNORETURN_COMMENT"] = "Beschreibe diese Funktion …";
messages["PROCEDURES_DEFNORETURN_DO"] = "";
messages["PROCEDURES_DEFNORETURN_HELPURL"] = "https://de.wikipedia.org/wiki/Prozedur_%28Programmierung%29";
messages["PROCEDURES_DEFNORETURN_PROCEDURE"] = "etwas tun";
messages["PROCEDURES_DEFNORETURN_TITLE"] = "um";
messages["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Ein Funktionsblock ohne Rückgabewert.";
messages["PROCEDURES_DEFRETURN_HELPURL"] = "https://de.wikipedia.org/wiki/Prozedur_%28Programmierung%29";
messages["PROCEDURES_DEFRETURN_RETURN"] = "gib zurück";
messages["PROCEDURES_DEFRETURN_TOOLTIP"] = "Ein Funktionsblock mit Rückgabewert.";
messages["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Warnung: Dieser Funktionsblock hat zwei gleich benannte Parameter.";
messages["PROCEDURES_HIGHLIGHT_DEF"] = "Markiere Funktionsblock";
messages["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";
messages["PROCEDURES_IFRETURN_TOOLTIP"] = "Gibt den zweiten Wert zurück und verlässt die Funktion, falls der erste Wert wahr ist.";
messages["PROCEDURES_IFRETURN_WARNING"] = "Warnung: Dieser Block darf nur innerhalb eines Funktionsblocks genutzt werden.";
messages["PROCEDURES_MUTATORARG_TITLE"] = "Variable:";
messages["PROCEDURES_MUTATORARG_TOOLTIP"] = "Eine Eingabe zur Funktion hinzufügen.";
messages["PROCEDURES_MUTATORCONTAINER_TITLE"] = "Parameter";
messages["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Die Eingaben zu dieser Funktion hinzufügen, entfernen oder neu anordnen.";
messages["REDO"] = "Wiederholen";
messages["REMOVE_COMMENT"] = "Kommentar entfernen";
messages["RENAME_VARIABLE"] = "Variable umbenennen …";
messages["RENAME_VARIABLE_TITLE"] = "Alle \"%1\" Variablen umbenennen in:";
messages["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
messages["TEXT_APPEND_TITLE"] = "zu %1 Text %2 anhängen";
messages["TEXT_APPEND_TOOLTIP"] = "Text an die Variable \"%1\" anhängen.";
messages["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
messages["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "wandel um in kleinbuchstaben";
messages["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "wandel um in Substantive";
messages["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "wandel um in GROSSBUCHSTABEN";
messages["TEXT_CHANGECASE_TOOLTIP"] = "Wandelt Schreibweise von Texten um, in Großbuchstaben, Kleinbuchstaben oder den ersten Buchstaben jedes Wortes groß und die anderen klein.";
messages["TEXT_CHARAT_FIRST"] = "nimm ersten";
messages["TEXT_CHARAT_FROM_END"] = "nimm von hinten";
messages["TEXT_CHARAT_FROM_START"] = "nimm";
messages["TEXT_CHARAT_HELPURL"] = "http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8l.doc%2Flanguage%2Fref%2Farsubex.htm";
messages["TEXT_CHARAT_LAST"] = "nimm letzten";
messages["TEXT_CHARAT_RANDOM"] = "nimm zufälligen";
messages["TEXT_CHARAT_TAIL"] = "Buchstaben";
messages["TEXT_CHARAT_TITLE"] = "im Text %1 %2";
messages["TEXT_CHARAT_TOOLTIP"] = "Extrahiert einen Buchstaben von einer bestimmten Position.";
messages["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
messages["TEXT_COUNT_MESSAGE0"] = "zähle %1 in %2";
messages["TEXT_COUNT_TOOLTIP"] = "Zähle, wie oft ein Text innerhalb eines anderen Textes vorkommt.";
messages["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Ein Element zum Text hinzufügen.";
messages["TEXT_CREATE_JOIN_TITLE_JOIN"] = "verbinden";
messages["TEXT_CREATE_JOIN_TOOLTIP"] = "Hinzufügen, entfernen und sortieren von Elementen.";
messages["TEXT_GET_SUBSTRING_END_FROM_END"] = "bis von hinten";
messages["TEXT_GET_SUBSTRING_END_FROM_START"] = "bis";
messages["TEXT_GET_SUBSTRING_END_LAST"] = "bis letzter";
messages["TEXT_GET_SUBSTRING_HELPURL"] = "http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8l.doc%2Flanguage%2Fref%2Farsubex.htm";
messages["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "im Text";
messages["TEXT_GET_SUBSTRING_START_FIRST"] = "nimm Teil ab erster";
messages["TEXT_GET_SUBSTRING_START_FROM_END"] = "nimm Teil ab von hinten";
messages["TEXT_GET_SUBSTRING_START_FROM_START"] = "nimm Teil ab";
messages["TEXT_GET_SUBSTRING_TAIL"] = "Buchstabe";
messages["TEXT_GET_SUBSTRING_TOOLTIP"] = "Gibt den angegebenen Textabschnitt zurück.";
messages["TEXT_INDEXOF_HELPURL"] = "http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8l.doc%2Flanguage%2Fref%2Farsubex.htm";
messages["TEXT_INDEXOF_OPERATOR_FIRST"] = "suche erstes Auftreten des Begriffs";
messages["TEXT_INDEXOF_OPERATOR_LAST"] = "suche letztes Auftreten des Begriffs";
messages["TEXT_INDEXOF_TITLE"] = "im Text %1 %2 %3";
messages["TEXT_INDEXOF_TOOLTIP"] = "Findet das erste / letzte Auftreten eines Suchbegriffs in einem Text.  Gibt die Position des Begriffs zurück oder %1 falls der Suchbegriff nicht gefunden wurde.";
messages["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
messages["TEXT_ISEMPTY_TITLE"] = "%1 ist leer";
messages["TEXT_ISEMPTY_TOOLTIP"] = "Ist wahr, falls der Text keine Zeichen enthält.";
messages["TEXT_JOIN_HELPURL"] = "";
messages["TEXT_JOIN_TITLE_CREATEWITH"] = "erstelle Text aus";
messages["TEXT_JOIN_TOOLTIP"] = "Erstellt einen Text durch das Verbinden von mehreren Textelementen.";
messages["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
messages["TEXT_LENGTH_TITLE"] = "Länge von %1";
messages["TEXT_LENGTH_TOOLTIP"] = "Die Anzahl von Zeichen in einem Text (inkl. Leerzeichen).";
messages["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
messages["TEXT_PRINT_TITLE"] = "gib aus %1";
messages["TEXT_PRINT_TOOLTIP"] = "Gibt den Text aus.";
messages["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
messages["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Fragt den Benutzer nach einer Zahl.";
messages["TEXT_PROMPT_TOOLTIP_TEXT"] = "Fragt den Benutzer nach einem Text.";
messages["TEXT_PROMPT_TYPE_NUMBER"] = "frage nach Zahl mit Hinweis";
messages["TEXT_PROMPT_TYPE_TEXT"] = "frage nach Text mit Hinweis";
messages["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
messages["TEXT_REPLACE_MESSAGE0"] = "ersetze %1 durch %2 in %3";
messages["TEXT_REPLACE_TOOLTIP"] = "Ersetze alle Vorkommen eines Textes innerhalb eines anderen Textes.";
messages["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
messages["TEXT_REVERSE_MESSAGE0"] = "kehre %1 um";
messages["TEXT_REVERSE_TOOLTIP"] = "Kehre die Reihenfolge der Zeichen im Text um.";
messages["TEXT_TEXT_HELPURL"] = "https://de.wikipedia.org/wiki/Zeichenkette";
messages["TEXT_TEXT_TOOLTIP"] = "Ein Buchstabe, Text oder Satz.";
messages["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
messages["TEXT_TRIM_OPERATOR_BOTH"] = "entferne Leerzeichen vom Anfang und vom Ende (links und rechts)";
messages["TEXT_TRIM_OPERATOR_LEFT"] = "entferne Leerzeichen vom Anfang (links)";
messages["TEXT_TRIM_OPERATOR_RIGHT"] = "entferne Leerzeichen vom Ende (rechts)";
messages["TEXT_TRIM_TOOLTIP"] = "Entfernt Leerzeichen vom Anfang und / oder Ende eines Textes.";
messages["TODAY"] = "Heute";
messages["UNDO"] = "Rückgängig";
messages["UNNAMED_KEY"] = "unbenannt";
messages["VARIABLES_DEFAULT_NAME"] = "Element";
messages["VARIABLES_GET_CREATE_SET"] = "Erzeuge \"Schreibe %1\"";
messages["VARIABLES_GET_HELPURL"] = "https://de.wikipedia.org/wiki/Variable_%28Programmierung%29";
messages["VARIABLES_GET_TOOLTIP"] = "Gibt den Wert der Variable zurück.";
messages["VARIABLES_SET"] = "setze %1 auf %2";
messages["VARIABLES_SET_CREATE_GET"] = "Erzeuge \"Lese %1\"";
messages["VARIABLES_SET_HELPURL"] = "https://de.wikipedia.org/wiki/Variable_%28Programmierung%29";
messages["VARIABLES_SET_TOOLTIP"] = "Setzt den Wert einer Variable.";
messages["VARIABLE_ALREADY_EXISTS"] = "Eine Variable namens „%1“ ist bereits vorhanden.";
messages["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "Eine Variable namens „%1“ ist bereits für einen anderen Typ vorhanden: „%2“.";
messages["WORKSPACE_ARIA_LABEL"] = "Blockly Arbeitsbereich";
messages["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Teile etwas mit…";
messages["CONTROLS_FOREACH_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_FOR_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = messages["CONTROLS_IF_MSG_ELSEIF"];
messages["CONTROLS_IF_ELSE_TITLE_ELSE"] = messages["CONTROLS_IF_MSG_ELSE"];
messages["CONTROLS_IF_IF_TITLE_IF"] = messages["CONTROLS_IF_MSG_IF"];
messages["CONTROLS_IF_MSG_THEN"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_WHILEUNTIL_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["LISTS_CREATE_WITH_ITEM_TITLE"] = messages["VARIABLES_DEFAULT_NAME"];
messages["LISTS_GET_INDEX_HELPURL"] = messages["LISTS_INDEX_OF_HELPURL"];
messages["LISTS_GET_INDEX_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_INDEX_OF_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_SET_INDEX_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["MATH_CHANGE_TITLE_ITEM"] = messages["VARIABLES_DEFAULT_NAME"];
messages["PROCEDURES_DEFRETURN_COMMENT"] = messages["PROCEDURES_DEFNORETURN_COMMENT"];
messages["PROCEDURES_DEFRETURN_DO"] = messages["PROCEDURES_DEFNORETURN_DO"];
messages["PROCEDURES_DEFRETURN_PROCEDURE"] = messages["PROCEDURES_DEFNORETURN_PROCEDURE"];
messages["PROCEDURES_DEFRETURN_TITLE"] = messages["PROCEDURES_DEFNORETURN_TITLE"];
messages["TEXT_APPEND_VARIABLE"] = messages["VARIABLES_DEFAULT_NAME"];
messages["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = messages["VARIABLES_DEFAULT_NAME"];

messages["MATH_HUE"] = "230";
messages["LOOPS_HUE"] = "120";
messages["LISTS_HUE"] = "260";
messages["LOGIC_HUE"] = "210";
messages["VARIABLES_HUE"] = "330";
messages["TEXTS_HUE"] = "160";
messages["PROCEDURES_HUE"] = "290";
messages["COLOUR_HUE"] = "20";
messages["VARIABLES_DYNAMIC_HUE"] = "310";