// This file was automatically generated.  Do not modify.

'use strict';

const messages = Object.create(null);

messages["ADD_COMMENT"] = "Adicionar Comentário";
messages["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Não se pode eliminar a variável '%1' porque faz parte da definição da função '%2'";
messages["CHANGE_VALUE_TITLE"] = "Alterar valor:";
messages["CLEAN_UP"] = "Limpar Blocos";
messages["COLLAPSED_WARNINGS_WARNING"] = "Os blocos ocultados contêm avisos.";
messages["COLLAPSE_ALL"] = "Ocultar Blocos";
messages["COLLAPSE_BLOCK"] = "Ocultar Bloco";
messages["COLOUR_BLEND_COLOUR1"] = "cor 1";
messages["COLOUR_BLEND_COLOUR2"] = "cor 2";
messages["COLOUR_BLEND_HELPURL"] = "https://meyerweb.com/eric/tools/color-blend/#:::rgbp";
messages["COLOUR_BLEND_RATIO"] = "proporção";
messages["COLOUR_BLEND_TITLE"] = "misturar";
messages["COLOUR_BLEND_TOOLTIP"] = "Mistura duas cores com a proporção indicada (0.0 - 1.0).";
messages["COLOUR_PICKER_HELPURL"] = "http://pt.wikipedia.org/wiki/Cor";
messages["COLOUR_PICKER_TOOLTIP"] = "Escolha uma cor da paleta de cores.";
messages["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
messages["COLOUR_RANDOM_TITLE"] = "cor aleatória";
messages["COLOUR_RANDOM_TOOLTIP"] = "Escolha uma cor aleatoriamente.";
messages["COLOUR_RGB_BLUE"] = "azul";
messages["COLOUR_RGB_GREEN"] = "verde";
messages["COLOUR_RGB_HELPURL"] = "https://www.december.com/html/spec/colorpercompact.html";
messages["COLOUR_RGB_RED"] = "vermelho";
messages["COLOUR_RGB_TITLE"] = "pinte com";
messages["COLOUR_RGB_TOOLTIP"] = "Cria uma cor de acordo com a quantidade especificada de vermelho, verde e azul. Todos os valores devem estar entre 0 e 100.";
messages["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
messages["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "sair do ciclo";
messages["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continuar com a próxima iteração do ciclo";
messages["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Sair do ciclo que está contido.";
messages["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Ignorar o resto deste ciclo, e continuar com a próxima iteração.";
messages["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Aviso: Este bloco só pode ser usado dentro de um ciclo.";
messages["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
messages["CONTROLS_FOREACH_TITLE"] = "para cada item %1 na lista %2";
messages["CONTROLS_FOREACH_TOOLTIP"] = "Para cada item numa lista, define a variável \"%1\" para o item e então faz algumas instruções.";
messages["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
messages["CONTROLS_FOR_TITLE"] = "contar com %1 de %2 até %3 por %4";
messages["CONTROLS_FOR_TOOLTIP"] = "Faz com que a variável \"%1\" assuma os valores desde o número inicial até ao número final, contando de acordo com o intervalo especificado e executa os blocos especificados.";
messages["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Acrescente uma condição ao bloco se.";
messages["CONTROLS_IF_ELSE_TOOLTIP"] = "Acrescente uma condição de excepação final para o bloco se.";
messages["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
messages["CONTROLS_IF_IF_TOOLTIP"] = "Acrescente, remova ou reordene secções para reconfigurar este bloco se.";
messages["CONTROLS_IF_MSG_ELSE"] = "senão";
messages["CONTROLS_IF_MSG_ELSEIF"] = "senão se";
messages["CONTROLS_IF_MSG_IF"] = "se";
messages["CONTROLS_IF_TOOLTIP_1"] = "Se um valor é verdadeiro, então realize alguns passos.";
messages["CONTROLS_IF_TOOLTIP_2"] = "Se um valor é verdadeiro, então realize o primeiro bloco de instruções.  Senão, realize o segundo bloco de instruções";
messages["CONTROLS_IF_TOOLTIP_3"] = "Se o primeiro valor é verdadeiro, então realize o primeiro bloco de instruções.  Senão, se o segundo valor é verdadeiro, realize o segundo bloco de instruções.";
messages["CONTROLS_IF_TOOLTIP_4"] = "Se o primeiro valor é verdadeiro, então realize o primeiro bloco de instruções.  Senão, se o segundo valor é verdadeiro, realize o segundo bloco de instruções.  Se nenhum dos blocos for verdadeiro, realize o último bloco de instruções.";
messages["CONTROLS_REPEAT_HELPURL"] = "http://pt.wikipedia.org/wiki/Estrutura_de_repeti%C3%A7%C3%A3o#Repeti.C3.A7.C3.A3o_com_vari.C3.A1vel_de_controle";
messages["CONTROLS_REPEAT_INPUT_DO"] = "faça";
messages["CONTROLS_REPEAT_TITLE"] = "repetir %1 vez";
messages["CONTROLS_REPEAT_TOOLTIP"] = "Faça algumas instruções várias vezes.";
messages["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
messages["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "repetir até";
messages["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "repetir enquanto";
messages["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Enquanto um valor for falso, então faça algumas instruções.";
messages["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Enquanto um valor for verdadeiro, então faça algumas instruções.";
messages["DELETE_ALL_BLOCKS"] = "Eliminar todos os %1 blocos?";
messages["DELETE_BLOCK"] = "Eliminar Bloco";
messages["DELETE_VARIABLE"] = "Eliminar a variável '%1'";
messages["DELETE_VARIABLE_CONFIRMATION"] = "Eliminar %1 utilizações da variável '%2'?";
messages["DELETE_X_BLOCKS"] = "Eliminar %1 Blocos";
messages["DIALOG_CANCEL"] = "Cancelar";
messages["DIALOG_OK"] = "OK";
messages["DISABLE_BLOCK"] = "Desativar Bloco";
messages["DUPLICATE_BLOCK"] = "Duplicar";
messages["DUPLICATE_COMMENT"] = "Duplicar comentário";
messages["ENABLE_BLOCK"] = "Ativar Bloco";
messages["EXPAND_ALL"] = "Expandir Blocos";
messages["EXPAND_BLOCK"] = "Expandir Bloco";
messages["EXTERNAL_INPUTS"] = "Entradas Externas";
messages["HELP"] = "Ajuda";
messages["INLINE_INPUTS"] = "Entradas Em Linhas";
messages["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
messages["LISTS_CREATE_EMPTY_TITLE"] = "criar lista vazia";
messages["LISTS_CREATE_EMPTY_TOOLTIP"] = "Retorna uma lista, de tamanho 0, contendo nenhum registo";
messages["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "lista";
messages["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Acrescente, remova ou reordene as seções para reconfigurar este bloco lista.";
messages["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
messages["LISTS_CREATE_WITH_INPUT_WITH"] = "criar lista com";
messages["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Acrescenta um item à lista.";
messages["LISTS_CREATE_WITH_TOOLTIP"] = "Cria uma lista com qualquer número de itens.";
messages["LISTS_GET_INDEX_FIRST"] = "primeiro";
messages["LISTS_GET_INDEX_FROM_END"] = "# a partir do final";
messages["LISTS_GET_INDEX_FROM_START"] = "#";
messages["LISTS_GET_INDEX_GET"] = "obter";
messages["LISTS_GET_INDEX_GET_REMOVE"] = "obter e remover";
messages["LISTS_GET_INDEX_LAST"] = "último";
messages["LISTS_GET_INDEX_RANDOM"] = "aleatório";
messages["LISTS_GET_INDEX_REMOVE"] = "remover";
messages["LISTS_GET_INDEX_TAIL"] = "";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Retorna o primeiro item de uma lista.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Retorna o item na posição especificada da lista.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Retorna o último item de uma lista.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Retorna um item aleatório de uma lista.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Remove e retorna o primeiro item de uma lista.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Remove e retorna o item na posição especificada de uma lista.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Remove e retorna o último item de uma lista.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Remove e retorna um item aleatório de uma lista.";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Remove o primeiro item de uma lista.";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Remove o item de uma posição especifica da lista.";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Remove o último item de uma lista.";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Remove um item aleatório de uma lista.";
messages["LISTS_GET_SUBLIST_END_FROM_END"] = "até #, a partir do final";
messages["LISTS_GET_SUBLIST_END_FROM_START"] = "até #";
messages["LISTS_GET_SUBLIST_END_LAST"] = "para o último";
messages["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
messages["LISTS_GET_SUBLIST_START_FIRST"] = "obtem sublista da primeira lista";
messages["LISTS_GET_SUBLIST_START_FROM_END"] = "obtem sublista de # a partir do final";
messages["LISTS_GET_SUBLIST_START_FROM_START"] = "obtem sublista de #";
messages["LISTS_GET_SUBLIST_TAIL"] = "";  // untranslated
messages["LISTS_GET_SUBLIST_TOOLTIP"] = "Cria uma cópia da porção especificada de uma lista.";
messages["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 é o último item.";
messages["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 é o primeiro item.";
messages["LISTS_INDEX_OF_FIRST"] = "encontre a primeira ocorrência do item";
messages["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
messages["LISTS_INDEX_OF_LAST"] = "encontre a última ocorrência do item";
messages["LISTS_INDEX_OF_TOOLTIP"] = "Retorna a posição da primeira/última ocorrência do item na lista.  Retorna %1 se o item não for encontrado.";
messages["LISTS_INLIST"] = "na lista";
messages["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
messages["LISTS_ISEMPTY_TITLE"] = "%1 está vazia";
messages["LISTS_ISEMPTY_TOOLTIP"] = "Retona verdadeiro se a lista estiver vazia.";
messages["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
messages["LISTS_LENGTH_TITLE"] = "tamanho de %1";
messages["LISTS_LENGTH_TOOLTIP"] = "Retorna o tamanho de uma lista.";
messages["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
messages["LISTS_REPEAT_TITLE"] = "criar lista com o item %1 repetido %2 vezes";
messages["LISTS_REPEAT_TOOLTIP"] = "Cria uma lista constituída por um dado valor repetido o número de vezes especificado.";
messages["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
messages["LISTS_REVERSE_MESSAGE0"] = "inverter %1";
messages["LISTS_REVERSE_TOOLTIP"] = "Inverter uma cópia da lista.";
messages["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
messages["LISTS_SET_INDEX_INPUT_TO"] = "como";
messages["LISTS_SET_INDEX_INSERT"] = "inserir em";
messages["LISTS_SET_INDEX_SET"] = "definir";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Insere o item no início da lista.";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Insere o item numa posição especificada numa lista.";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Insere o item no final da lista.";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Insere o item numa posição aleatória de uma lista.";
messages["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Define o primeiro item de uma lista.";
messages["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Define o item na posição especificada de uma lista.";
messages["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Define o último item de uma lista.";
messages["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Define um item aleatório de uma lista.";
messages["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
messages["LISTS_SORT_ORDER_ASCENDING"] = "ascendente";
messages["LISTS_SORT_ORDER_DESCENDING"] = "descendente";
messages["LISTS_SORT_TITLE"] = "ordenar %1 %2 %3";
messages["LISTS_SORT_TOOLTIP"] = "Ordenar uma cópia de uma lista.";
messages["LISTS_SORT_TYPE_IGNORECASE"] = "alfabética, ignorar maiúsculas/minúsculas";
messages["LISTS_SORT_TYPE_NUMERIC"] = "numérica";
messages["LISTS_SORT_TYPE_TEXT"] = "alfabética";
messages["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
messages["LISTS_SPLIT_LIST_FROM_TEXT"] = "fazer lista a partir de texto";
messages["LISTS_SPLIT_TEXT_FROM_LIST"] = "fazer texto a partir da lista";
messages["LISTS_SPLIT_TOOLTIP_JOIN"] = "Juntar uma lista de textos num único texto, separado por um delimitador.";
messages["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Dividir o texto numa lista de textos, separando-o em cada delimitador.";
messages["LISTS_SPLIT_WITH_DELIMITER"] = "com delimitador";
messages["LOGIC_BOOLEAN_FALSE"] = "falso";
messages["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
messages["LOGIC_BOOLEAN_TOOLTIP"] = "Retorna verdadeiro ou falso.";
messages["LOGIC_BOOLEAN_TRUE"] = "verdadeiro";
messages["LOGIC_COMPARE_HELPURL"] = "http://pt.wikipedia.org/wiki/Inequa%C3%A7%C3%A3o";
messages["LOGIC_COMPARE_TOOLTIP_EQ"] = "Retorna verdadeiro se ambas as entradas forem iguais entre si.";
messages["LOGIC_COMPARE_TOOLTIP_GT"] = "Retorna verdadeiro se a primeira entrada for maior que a segunda entrada.";
messages["LOGIC_COMPARE_TOOLTIP_GTE"] = "Retorna verdadeiro se a primeira entrada for maior ou igual à segunda entrada.";
messages["LOGIC_COMPARE_TOOLTIP_LT"] = "Retorna verdadeiro se a primeira entrada for menor que a segunda entrada.";
messages["LOGIC_COMPARE_TOOLTIP_LTE"] = "Retorna verdadeiro se a primeira entrada for menor ou igual à segunda entrada.";
messages["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Retorna verdadeiro se ambas as entradas forem diferentes entre si.";
messages["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
messages["LOGIC_NEGATE_TITLE"] = "não %1";
messages["LOGIC_NEGATE_TOOLTIP"] = "Retorna verdadeiro se a entrada for falsa.  Retorna falso se a entrada for verdadeira.";
messages["LOGIC_NULL"] = "nulo";
messages["LOGIC_NULL_HELPURL"] = "http://en.wikipedia.org/wiki/Nullable_type";
messages["LOGIC_NULL_TOOLTIP"] = "Retorna nulo.";
messages["LOGIC_OPERATION_AND"] = "e";
messages["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
messages["LOGIC_OPERATION_OR"] = "ou";
messages["LOGIC_OPERATION_TOOLTIP_AND"] = "Retorna verdadeiro se ambas as entradas forem verdadeiras.";
messages["LOGIC_OPERATION_TOOLTIP_OR"] = "Retorna verdadeiro se pelo menos uma das estradas for verdadeira.";
messages["LOGIC_TERNARY_CONDITION"] = "teste";
messages["LOGIC_TERNARY_HELPURL"] = "http://en.wikipedia.org/wiki/%3F:";
messages["LOGIC_TERNARY_IF_FALSE"] = "se falso";
messages["LOGIC_TERNARY_IF_TRUE"] = "se verdadeiro";
messages["LOGIC_TERNARY_TOOLTIP"] = "Avalia a condição em \"teste\". Se a condição for verdadeira retorna o valor \"se verdadeiro\", senão retorna o valor \"se falso\".";
messages["MATH_ADDITION_SYMBOL"] = "+";
messages["MATH_ARITHMETIC_HELPURL"] = "http://pt.wikipedia.org/wiki/Aritm%C3%A9tica";
messages["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Retorna a soma de dois números.";
messages["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Retorna o quociente da divisão de dois números.";
messages["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Retorna a diferença de dois números.";
messages["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Retorna o produto de dois números.";
messages["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Retorna o primeiro número elevado à potência do segundo número.";
messages["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";
messages["MATH_ATAN2_TITLE"] = "atan2 de X:%1 Y:%2";
messages["MATH_ATAN2_TOOLTIP"] = "Devolver o arco tangente do ponto (X, Y) em graus entre -180 e 180.";
messages["MATH_CHANGE_HELPURL"] = "http://pt.wikipedia.org/wiki/Adi%C3%A7%C3%A3o";
messages["MATH_CHANGE_TITLE"] = "alterar %1 por %2";
messages["MATH_CHANGE_TOOLTIP"] = "Soma um número à variável \"%1\".";
messages["MATH_CONSTANT_HELPURL"] = "http://pt.wikipedia.org/wiki/Anexo:Lista_de_constantes_matem%C3%A1ticas";
messages["MATH_CONSTANT_TOOLTIP"] = "Retorna uma das constantes comuns: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), ou ∞ (infinito).";
messages["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
messages["MATH_CONSTRAIN_TITLE"] = "restringe %1 inferior %2 superior %3";
messages["MATH_CONSTRAIN_TOOLTIP"] = "Restringe um número entre os limites especificados (inclusive).";
messages["MATH_DIVISION_SYMBOL"] = "÷";
messages["MATH_IS_DIVISIBLE_BY"] = "é divisível por";
messages["MATH_IS_EVEN"] = "é par";
messages["MATH_IS_NEGATIVE"] = "é negativo";
messages["MATH_IS_ODD"] = "é impar";
messages["MATH_IS_POSITIVE"] = "é positivo";
messages["MATH_IS_PRIME"] = "é primo";
messages["MATH_IS_TOOLTIP"] = "Verifica se um número é par, impar, primo, inteiro, positivo, negativo, ou se é divisível por outro número.  Retorna verdadeiro ou falso.";
messages["MATH_IS_WHOLE"] = "é inteiro";
messages["MATH_MODULO_HELPURL"] = "http://pt.wikipedia.org/wiki/Opera%C3%A7%C3%A3o_m%C3%B3dulo";
messages["MATH_MODULO_TITLE"] = "resto da divisão de %1 ÷ %2";
messages["MATH_MODULO_TOOLTIP"] = "Retorna o resto da divisão de dois números.";
messages["MATH_MULTIPLICATION_SYMBOL"] = "×";
messages["MATH_NUMBER_HELPURL"] = "http://pt.wikipedia.org/wiki/N%C3%BAmero";
messages["MATH_NUMBER_TOOLTIP"] = "Um número.";
messages["MATH_ONLIST_HELPURL"] = "";  // untranslated
messages["MATH_ONLIST_OPERATOR_AVERAGE"] = "média de uma lista";
messages["MATH_ONLIST_OPERATOR_MAX"] = "maior de uma lista";
messages["MATH_ONLIST_OPERATOR_MEDIAN"] = "mediana de uma lista";
messages["MATH_ONLIST_OPERATOR_MIN"] = "menor de uma lista";
messages["MATH_ONLIST_OPERATOR_MODE"] = "moda de uma lista";
messages["MATH_ONLIST_OPERATOR_RANDOM"] = "item aleatório de uma lista";
messages["MATH_ONLIST_OPERATOR_STD_DEV"] = "desvio padrão de uma lista";
messages["MATH_ONLIST_OPERATOR_SUM"] = "soma da lista";
messages["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Retorna a média aritmética dos valores números da lista.";
messages["MATH_ONLIST_TOOLTIP_MAX"] = "Retorna o maior número da lista.";
messages["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Retorna a mediana da lista.";
messages["MATH_ONLIST_TOOLTIP_MIN"] = "Retorna o menor número da lista.";
messages["MATH_ONLIST_TOOLTIP_MODE"] = "Retorna a lista de item(ns) mais comum(ns) da lista.";
messages["MATH_ONLIST_TOOLTIP_RANDOM"] = "Retorna um elemento aleatório da lista.";
messages["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Retorna o desvio padrão dos números da lista.";
messages["MATH_ONLIST_TOOLTIP_SUM"] = "Retorna a soma de todos os números da lista.";
messages["MATH_POWER_SYMBOL"] = "^";
messages["MATH_RANDOM_FLOAT_HELPURL"] = "http://pt.wikipedia.org/wiki/N%C3%BAmero_aleat%C3%B3rio";
messages["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "fração aleatória";
messages["MATH_RANDOM_FLOAT_TOOLTIP"] = "Insere uma fração aleatória entre 0.0 (inclusive) e 1.0 (exclusive).";
messages["MATH_RANDOM_INT_HELPURL"] = "http://pt.wikipedia.org/wiki/N%C3%BAmero_aleat%C3%B3rio";
messages["MATH_RANDOM_INT_TITLE"] = "inteiro aleatório entre %1 e %2";
messages["MATH_RANDOM_INT_TOOLTIP"] = "Retorna um número inteiro entre os dois limites especificados, inclusive.";
messages["MATH_ROUND_HELPURL"] = "http://pt.wikipedia.org/wiki/Arredondamento";
messages["MATH_ROUND_OPERATOR_ROUND"] = "arredonda";
messages["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "arredonda para baixo";
messages["MATH_ROUND_OPERATOR_ROUNDUP"] = "arredonda para cima";
messages["MATH_ROUND_TOOLTIP"] = "Arredonda um número para cima ou para baixo.";
messages["MATH_SINGLE_HELPURL"] = "http://pt.wikipedia.org/wiki/Raiz_quadrada";
messages["MATH_SINGLE_OP_ABSOLUTE"] = "absoluto";
messages["MATH_SINGLE_OP_ROOT"] = "raíz quadrada";
messages["MATH_SINGLE_TOOLTIP_ABS"] = "Retorna o valor absoluto de um número.";
messages["MATH_SINGLE_TOOLTIP_EXP"] = "Retorna o número e elevado à potência de um número.";
messages["MATH_SINGLE_TOOLTIP_LN"] = "Retorna o logarítmo natural de um número.";
messages["MATH_SINGLE_TOOLTIP_LOG10"] = "Retorna o logarítmo em base 10 de um número.";
messages["MATH_SINGLE_TOOLTIP_NEG"] = "Retorna o oposto de um número.";
messages["MATH_SINGLE_TOOLTIP_POW10"] = "Retorna 10 elevado à potência de um número.";
messages["MATH_SINGLE_TOOLTIP_ROOT"] = "Retorna a raiz quadrada de um número.";
messages["MATH_SUBTRACTION_SYMBOL"] = "-";
messages["MATH_TRIG_ACOS"] = "acos";
messages["MATH_TRIG_ASIN"] = "asin";
messages["MATH_TRIG_ATAN"] = "atan";
messages["MATH_TRIG_COS"] = "cos";
messages["MATH_TRIG_HELPURL"] = "http://pt.wikipedia.org/wiki/Fun%C3%A7%C3%A3o_trigonom%C3%A9trica";
messages["MATH_TRIG_SIN"] = "sin";
messages["MATH_TRIG_TAN"] = "tan";
messages["MATH_TRIG_TOOLTIP_ACOS"] = "Retorna o arco cosseno de um número.";
messages["MATH_TRIG_TOOLTIP_ASIN"] = "Retorna o arco seno de um número.";
messages["MATH_TRIG_TOOLTIP_ATAN"] = "Retorna o arco tangente de um número.";
messages["MATH_TRIG_TOOLTIP_COS"] = "Retorna o cosseno de um grau (não radiano).";
messages["MATH_TRIG_TOOLTIP_SIN"] = "Retorna o seno de um grau (não radiano).";
messages["MATH_TRIG_TOOLTIP_TAN"] = "Retorna a tangente de um grau (não radiano).";
messages["NEW_COLOUR_VARIABLE"] = "Criar variável colorida...";
messages["NEW_NUMBER_VARIABLE"] = "Criar variável numérica...";
messages["NEW_STRING_VARIABLE"] = "Criar variável de segmentos de texto...";
messages["NEW_VARIABLE"] = "Criar variável…";
messages["NEW_VARIABLE_TITLE"] = "Nome da nova variável:";
messages["NEW_VARIABLE_TYPE_TITLE"] = "Tipo da nova variável:";
messages["ORDINAL_NUMBER_SUFFIX"] = "";  // untranslated
messages["PROCEDURES_ALLOW_STATEMENTS"] = "permitir declarações";
messages["PROCEDURES_BEFORE_PARAMS"] = "com:";
messages["PROCEDURES_CALLNORETURN_HELPURL"] = "https://pt.wikipedia.org/wiki/Sub-rotina";
messages["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Executa a função \"%1\".";
messages["PROCEDURES_CALLRETURN_HELPURL"] = "https://pt.wikipedia.org/wiki/Sub-rotina";
messages["PROCEDURES_CALLRETURN_TOOLTIP"] = "Executa a função \"%1\" e usa o seu retorno.";
messages["PROCEDURES_CALL_BEFORE_PARAMS"] = "com:";
messages["PROCEDURES_CREATE_DO"] = "Criar \"%1\"";
messages["PROCEDURES_DEFNORETURN_COMMENT"] = "Descreva esta função...";
messages["PROCEDURES_DEFNORETURN_DO"] = "";  // untranslated
messages["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
messages["PROCEDURES_DEFNORETURN_PROCEDURE"] = "faz algo";
messages["PROCEDURES_DEFNORETURN_TITLE"] = "para";
messages["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Cria uma função que não tem retorno.";
messages["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
messages["PROCEDURES_DEFRETURN_RETURN"] = "retorna";
messages["PROCEDURES_DEFRETURN_TOOLTIP"] = "Cria uma função que possui um valor de retorno.";
messages["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Aviso: Esta função tem parâmetros duplicados.";
messages["PROCEDURES_HIGHLIGHT_DEF"] = "Destacar definição da função";
messages["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
messages["PROCEDURES_IFRETURN_TOOLTIP"] = "se o valor é verdadeiro, então retorna um segundo valor.";
messages["PROCEDURES_IFRETURN_WARNING"] = "Aviso: Este bloco só pode ser utilizado dentro da definição de uma função.";
messages["PROCEDURES_MUTATORARG_TITLE"] = "nome da entrada:";
messages["PROCEDURES_MUTATORARG_TOOLTIP"] = "Adicionar uma entrada para a função.";
messages["PROCEDURES_MUTATORCONTAINER_TITLE"] = "entradas";
messages["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Adicionar, remover ou reordenar as entradas para esta função.";
messages["REDO"] = "Refazer";
messages["REMOVE_COMMENT"] = "Remover Comentário";
messages["RENAME_VARIABLE"] = "Renomear variável...";
messages["RENAME_VARIABLE_TITLE"] = "Renomear todas as variáveis '%1' para:";
messages["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
messages["TEXT_APPEND_TITLE"] = "para %1 acrescentar texto %2";
messages["TEXT_APPEND_TOOLTIP"] = "Acrescentar um pedaço de texto à variável \"%1\".";
messages["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
messages["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "para minúsculas";
messages["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "para Iniciais Maiúsculas";
messages["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "para MAIÚSCULAS";
messages["TEXT_CHANGECASE_TOOLTIP"] = "Retorna uma cópia do texto em formato diferente.";
messages["TEXT_CHARAT_FIRST"] = "obter primeira letra";
messages["TEXT_CHARAT_FROM_END"] = "obter letra nº a partir do final";
messages["TEXT_CHARAT_FROM_START"] = "obter letra nº";
messages["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
messages["TEXT_CHARAT_LAST"] = "obter última letra";
messages["TEXT_CHARAT_RANDOM"] = "obter letra aleatória";
messages["TEXT_CHARAT_TAIL"] = "";  // untranslated
messages["TEXT_CHARAT_TITLE"] = "no texto %1 %2";
messages["TEXT_CHARAT_TOOLTIP"] = "Retorna a letra na posição especificada.";
messages["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
messages["TEXT_COUNT_MESSAGE0"] = "contar %1 em %2";
messages["TEXT_COUNT_TOOLTIP"] = "Conte quantas vezes um certo texto aparece dentro de algum outro texto.";
messages["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Acrescentar um item ao texto.";
messages["TEXT_CREATE_JOIN_TITLE_JOIN"] = "unir";
messages["TEXT_CREATE_JOIN_TOOLTIP"] = "Acrescenta, remove ou reordena seções para reconfigurar este bloco de texto.";
messages["TEXT_GET_SUBSTRING_END_FROM_END"] = "até letra nº a partir do final";
messages["TEXT_GET_SUBSTRING_END_FROM_START"] = "até letra nº";
messages["TEXT_GET_SUBSTRING_END_LAST"] = "até última letra";
messages["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
messages["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "no texto";
messages["TEXT_GET_SUBSTRING_START_FIRST"] = "obter subsequência a partir da primeira letra";
messages["TEXT_GET_SUBSTRING_START_FROM_END"] = "obter subsequência de tamanho # a partir do final";
messages["TEXT_GET_SUBSTRING_START_FROM_START"] = "obter subsequência de tamanho #";
messages["TEXT_GET_SUBSTRING_TAIL"] = "";  // untranslated
messages["TEXT_GET_SUBSTRING_TOOLTIP"] = "Retorna a parte especificada do texto.";
messages["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
messages["TEXT_INDEXOF_OPERATOR_FIRST"] = "primeira ocorrência do texto";
messages["TEXT_INDEXOF_OPERATOR_LAST"] = "última ocorrência do texto";
messages["TEXT_INDEXOF_TITLE"] = "no texto %1 %2 %3";
messages["TEXT_INDEXOF_TOOLTIP"] = "Retorna a posição da primeira/última ocorrência do primeiro texto no segundo texto. Retorna %1 se o texto não for encontrado.";
messages["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
messages["TEXT_ISEMPTY_TITLE"] = "%1 está vazio";
messages["TEXT_ISEMPTY_TOOLTIP"] = "Retorna verdadeiro se o texto fornecido estiver vazio.";
messages["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
messages["TEXT_JOIN_TITLE_CREATEWITH"] = "criar texto com";
messages["TEXT_JOIN_TOOLTIP"] = "Criar um pedaço de texto juntando qualquer número de itens.";
messages["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
messages["TEXT_LENGTH_TITLE"] = "tamanho de %1";
messages["TEXT_LENGTH_TOOLTIP"] = "Devolve o número de letras (incluindo espaços) do texto fornecido.";
messages["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
messages["TEXT_PRINT_TITLE"] = "imprime %1";
messages["TEXT_PRINT_TOOLTIP"] = "Imprime o texto, número ou outro valor especificado.";
messages["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
messages["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Pede ao utilizador um número.";
messages["TEXT_PROMPT_TOOLTIP_TEXT"] = "Pede ao utilizador um texto.";
messages["TEXT_PROMPT_TYPE_NUMBER"] = "pede um número com a mensagem";
messages["TEXT_PROMPT_TYPE_TEXT"] = "Pede um texto com a mensagem";
messages["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
messages["TEXT_REPLACE_MESSAGE0"] = "substituir %1 por %2 em %3";
messages["TEXT_REPLACE_TOOLTIP"] = "Substituir todas as ocorrências de um certo texto dentro de algum outro texto.";
messages["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
messages["TEXT_REVERSE_MESSAGE0"] = "inverter %1";
messages["TEXT_REVERSE_TOOLTIP"] = "Inverte a ordem dos caracteres no texto.";
messages["TEXT_TEXT_HELPURL"] = "http://pt.wikipedia.org/wiki/Cadeia_de_caracteres";
messages["TEXT_TEXT_TOOLTIP"] = "Uma letra, palavra ou linha de texto.";
messages["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
messages["TEXT_TRIM_OPERATOR_BOTH"] = "remover espaços de ambos os lados";
messages["TEXT_TRIM_OPERATOR_LEFT"] = "remover espaços à esquerda de";
messages["TEXT_TRIM_OPERATOR_RIGHT"] = "remover espaços à direita";
messages["TEXT_TRIM_TOOLTIP"] = "Retorna uma cópia do texto com os espaços removidos de uma ou ambas as extremidades.";
messages["TODAY"] = "Hoje";
messages["UNDO"] = "Desfazer";
messages["UNNAMED_KEY"] = "sem nome";
messages["VARIABLES_DEFAULT_NAME"] = "item";
messages["VARIABLES_GET_CREATE_SET"] = "Criar \"definir %1\"";
messages["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
messages["VARIABLES_GET_TOOLTIP"] = "Retorna o valor desta variável.";
messages["VARIABLES_SET"] = "definir %1 para %2";
messages["VARIABLES_SET_CREATE_GET"] = "Criar \"obter %1\"";
messages["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
messages["VARIABLES_SET_TOOLTIP"] = "Define esta variável para o valor inserido.";
messages["VARIABLE_ALREADY_EXISTS"] = "Já existe uma variável com o nome de '%1'.";
messages["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "Já existe uma variável chamada '%1' para outra do tipo: '%2'.";
messages["WORKSPACE_ARIA_LABEL"] = "Espaço de trabalho de Blockly";
messages["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Diz algo...";
messages["CONTROLS_FOREACH_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_FOR_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = messages["CONTROLS_IF_MSG_ELSEIF"];
messages["CONTROLS_IF_ELSE_TITLE_ELSE"] = messages["CONTROLS_IF_MSG_ELSE"];
messages["CONTROLS_IF_IF_TITLE_IF"] = messages["CONTROLS_IF_MSG_IF"];
messages["CONTROLS_IF_MSG_THEN"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_WHILEUNTIL_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["LISTS_CREATE_WITH_ITEM_TITLE"] = messages["VARIABLES_DEFAULT_NAME"];
messages["LISTS_GET_INDEX_HELPURL"] = messages["LISTS_INDEX_OF_HELPURL"];
messages["LISTS_GET_INDEX_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_INDEX_OF_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_SET_INDEX_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["MATH_CHANGE_TITLE_ITEM"] = messages["VARIABLES_DEFAULT_NAME"];
messages["PROCEDURES_DEFRETURN_COMMENT"] = messages["PROCEDURES_DEFNORETURN_COMMENT"];
messages["PROCEDURES_DEFRETURN_DO"] = messages["PROCEDURES_DEFNORETURN_DO"];
messages["PROCEDURES_DEFRETURN_PROCEDURE"] = messages["PROCEDURES_DEFNORETURN_PROCEDURE"];
messages["PROCEDURES_DEFRETURN_TITLE"] = messages["PROCEDURES_DEFNORETURN_TITLE"];
messages["TEXT_APPEND_VARIABLE"] = messages["VARIABLES_DEFAULT_NAME"];
messages["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = messages["VARIABLES_DEFAULT_NAME"];

messages["MATH_HUE"] = "230";
messages["LOOPS_HUE"] = "120";
messages["LISTS_HUE"] = "260";
messages["LOGIC_HUE"] = "210";
messages["VARIABLES_HUE"] = "330";
messages["TEXTS_HUE"] = "160";
messages["PROCEDURES_HUE"] = "290";
messages["COLOUR_HUE"] = "20";
messages["VARIABLES_DYNAMIC_HUE"] = "310";