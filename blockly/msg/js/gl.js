// This file was automatically generated.  Do not modify.

'use strict';

const messages = Object.create(null);

messages["ADD_COMMENT"] = "Engadir un comentario";
messages["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Can't delete the variable '%1' because it's part of the definition of the function '%2'";  // untranslated
messages["CHANGE_VALUE_TITLE"] = "Cambiar o valor:";
messages["CLEAN_UP"] = "Limpar os bloques";
messages["COLLAPSED_WARNINGS_WARNING"] = "Collapsed blocks contain warnings.";  // untranslated
messages["COLLAPSE_ALL"] = "Contraer os bloques";
messages["COLLAPSE_BLOCK"] = "Contraer o bloque";
messages["COLOUR_BLEND_COLOUR1"] = "cor 1";
messages["COLOUR_BLEND_COLOUR2"] = "cor 2";
messages["COLOUR_BLEND_HELPURL"] = "https://meyerweb.com/eric/tools/color-blend/#:::rgbp";  // untranslated
messages["COLOUR_BLEND_RATIO"] = "proporción";
messages["COLOUR_BLEND_TITLE"] = "mesturar";
messages["COLOUR_BLEND_TOOLTIP"] = "Mestura dúas cores ca proporción indicada (0.0 - 1.0).";
messages["COLOUR_PICKER_HELPURL"] = "https://gl.wikipedia.org/wiki/Cor";
messages["COLOUR_PICKER_TOOLTIP"] = "Escolle unha cor da paleta.";
messages["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
messages["COLOUR_RANDOM_TITLE"] = "cor ó chou";
messages["COLOUR_RANDOM_TOOLTIP"] = "Escolle unha cor ao chou.";
messages["COLOUR_RGB_BLUE"] = "azul";
messages["COLOUR_RGB_GREEN"] = "verde";
messages["COLOUR_RGB_HELPURL"] = "https://www.december.com/html/spec/colorpercompact.html";  // untranslated
messages["COLOUR_RGB_RED"] = "vermello";
messages["COLOUR_RGB_TITLE"] = "colorar con";
messages["COLOUR_RGB_TOOLTIP"] = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";  // untranslated
messages["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
messages["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "break out of loop";  // untranslated
messages["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continue with next iteration of loop";  // untranslated
messages["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Break out of the containing loop.";  // untranslated
messages["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Skip the rest of this loop, and continue with the next iteration.";  // untranslated
messages["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Warning: This block may only be used within a loop.";  // untranslated
messages["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
messages["CONTROLS_FOREACH_TITLE"] = "for each item %1 in list %2";  // untranslated
messages["CONTROLS_FOREACH_TOOLTIP"] = "For each item in a list, set the variable '%1' to the item, and then do some statements.";  // untranslated
messages["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
messages["CONTROLS_FOR_TITLE"] = "count with %1 from %2 to %3 by %4";  // untranslated
messages["CONTROLS_FOR_TOOLTIP"] = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";  // untranslated
messages["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Add a condition to the if block.";  // untranslated
messages["CONTROLS_IF_ELSE_TOOLTIP"] = "Add a final, catch-all condition to the if block.";  // untranslated
messages["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
messages["CONTROLS_IF_IF_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this if block.";  // untranslated
messages["CONTROLS_IF_MSG_ELSE"] = "senón";
messages["CONTROLS_IF_MSG_ELSEIF"] = "mais se";
messages["CONTROLS_IF_MSG_IF"] = "se";
messages["CONTROLS_IF_TOOLTIP_1"] = "If a value is true, then do some statements.";  // untranslated
messages["CONTROLS_IF_TOOLTIP_2"] = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";  // untranslated
messages["CONTROLS_IF_TOOLTIP_3"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";  // untranslated
messages["CONTROLS_IF_TOOLTIP_4"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";  // untranslated
messages["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";  // untranslated
messages["CONTROLS_REPEAT_INPUT_DO"] = "facer";
messages["CONTROLS_REPEAT_TITLE"] = "repeat %1 times";  // untranslated
messages["CONTROLS_REPEAT_TOOLTIP"] = "Faga algunhas instrucións varias veces.";
messages["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
messages["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "repetir ata";
messages["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "repetir mentres";
messages["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "While a value is false, then do some statements.";  // untranslated
messages["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "While a value is true, then do some statements.";  // untranslated
messages["DELETE_ALL_BLOCKS"] = "Queres eliminar os %1 bloques?";
messages["DELETE_BLOCK"] = "Borrar o bloque";
messages["DELETE_VARIABLE"] = "Delete the '%1' variable";  // untranslated
messages["DELETE_VARIABLE_CONFIRMATION"] = "Delete %1 uses of the '%2' variable?";  // untranslated
messages["DELETE_X_BLOCKS"] = "Borrar %1 bloques";
messages["DIALOG_CANCEL"] = "Cancelar";
messages["DIALOG_OK"] = "Aceptar";
messages["DISABLE_BLOCK"] = "Desactivar o bloque";
messages["DUPLICATE_BLOCK"] = "Duplicar";
messages["DUPLICATE_COMMENT"] = "Duplicar o comentario";
messages["ENABLE_BLOCK"] = "Activar o bloque";
messages["EXPAND_ALL"] = "Expandir os bloques";
messages["EXPAND_BLOCK"] = "Expandir o bloque";
messages["EXTERNAL_INPUTS"] = "Entradas externas";
messages["HELP"] = "Axuda";
messages["INLINE_INPUTS"] = "Entradas en liña";
messages["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
messages["LISTS_CREATE_EMPTY_TITLE"] = "create empty list";  // untranslated
messages["LISTS_CREATE_EMPTY_TOOLTIP"] = "Returns a list, of length 0, containing no data records";  // untranslated
messages["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "listaxe";
messages["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";  // untranslated
messages["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
messages["LISTS_CREATE_WITH_INPUT_WITH"] = "create list with";  // untranslated
messages["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Add an item to the list.";  // untranslated
messages["LISTS_CREATE_WITH_TOOLTIP"] = "Create a list with any number of items.";  // untranslated
messages["LISTS_GET_INDEX_FIRST"] = "primeiro";
messages["LISTS_GET_INDEX_FROM_END"] = "# from end";  // untranslated
messages["LISTS_GET_INDEX_FROM_START"] = "#";  // untranslated
messages["LISTS_GET_INDEX_GET"] = "get";  // untranslated
messages["LISTS_GET_INDEX_GET_REMOVE"] = "get and remove";  // untranslated
messages["LISTS_GET_INDEX_LAST"] = "derradeiro";
messages["LISTS_GET_INDEX_RANDOM"] = "ó chou";
messages["LISTS_GET_INDEX_REMOVE"] = "remove";  // untranslated
messages["LISTS_GET_INDEX_TAIL"] = "";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Returns the first item in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Returns the item at the specified position in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Returns the last item in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Returns a random item in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Removes and returns the first item in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Removes and returns the item at the specified position in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Removes and returns the last item in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Removes and returns a random item in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Removes the first item in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Removes the item at the specified position in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Removes the last item in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Removes a random item in a list.";  // untranslated
messages["LISTS_GET_SUBLIST_END_FROM_END"] = "to # from end";  // untranslated
messages["LISTS_GET_SUBLIST_END_FROM_START"] = "to #";  // untranslated
messages["LISTS_GET_SUBLIST_END_LAST"] = "to last";  // untranslated
messages["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
messages["LISTS_GET_SUBLIST_START_FIRST"] = "get sub-list from first";  // untranslated
messages["LISTS_GET_SUBLIST_START_FROM_END"] = "get sub-list from # from end";  // untranslated
messages["LISTS_GET_SUBLIST_START_FROM_START"] = "get sub-list from #";  // untranslated
messages["LISTS_GET_SUBLIST_TAIL"] = "";  // untranslated
messages["LISTS_GET_SUBLIST_TOOLTIP"] = "Creates a copy of the specified portion of a list.";  // untranslated
messages["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 é o derradeiro elemento.";
messages["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 é o primeiro elemento.";
messages["LISTS_INDEX_OF_FIRST"] = "find first occurrence of item";  // untranslated
messages["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
messages["LISTS_INDEX_OF_LAST"] = "find last occurrence of item";  // untranslated
messages["LISTS_INDEX_OF_TOOLTIP"] = "Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.";  // untranslated
messages["LISTS_INLIST"] = "na listaxe";
messages["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
messages["LISTS_ISEMPTY_TITLE"] = "%1 atópase baleira";
messages["LISTS_ISEMPTY_TOOLTIP"] = "Retona verdadeiro se a listaxe atópase baleira.";
messages["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
messages["LISTS_LENGTH_TITLE"] = "length of %1";  // untranslated
messages["LISTS_LENGTH_TOOLTIP"] = "Returns the length of a list.";  // untranslated
messages["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
messages["LISTS_REPEAT_TITLE"] = "create list with item %1 repeated %2 times";  // untranslated
messages["LISTS_REPEAT_TOOLTIP"] = "Creates a list consisting of the given value repeated the specified number of times.";  // untranslated
messages["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";  // untranslated
messages["LISTS_REVERSE_MESSAGE0"] = "reverse %1";  // untranslated
messages["LISTS_REVERSE_TOOLTIP"] = "Reverse a copy of a list.";  // untranslated
messages["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
messages["LISTS_SET_INDEX_INPUT_TO"] = "como";
messages["LISTS_SET_INDEX_INSERT"] = "inserir en";
messages["LISTS_SET_INDEX_SET"] = "definir";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Inserts the item at the start of a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Inserts the item at the specified position in a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Append the item to the end of a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Inserts the item randomly in a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Sets the first item in a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Sets the item at the specified position in a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Sets the last item in a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Sets a random item in a list.";  // untranslated
messages["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";  // untranslated
messages["LISTS_SORT_ORDER_ASCENDING"] = "ascendente";
messages["LISTS_SORT_ORDER_DESCENDING"] = "descendente";
messages["LISTS_SORT_TITLE"] = "sort %1 %2 %3";  // untranslated
messages["LISTS_SORT_TOOLTIP"] = "Ordear unha copia dunha listaxe.";
messages["LISTS_SORT_TYPE_IGNORECASE"] = "alfabética, iñorar maiúsculas/minúsculas";
messages["LISTS_SORT_TYPE_NUMERIC"] = "numérica";
messages["LISTS_SORT_TYPE_TEXT"] = "alfabética";
messages["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
messages["LISTS_SPLIT_LIST_FROM_TEXT"] = "make list from text";  // untranslated
messages["LISTS_SPLIT_TEXT_FROM_LIST"] = "make text from list";  // untranslated
messages["LISTS_SPLIT_TOOLTIP_JOIN"] = "Join a list of texts into one text, separated by a delimiter.";  // untranslated
messages["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Split text into a list of texts, breaking at each delimiter.";  // untranslated
messages["LISTS_SPLIT_WITH_DELIMITER"] = "with delimiter";  // untranslated
messages["LOGIC_BOOLEAN_FALSE"] = "falso";
messages["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
messages["LOGIC_BOOLEAN_TOOLTIP"] = "Returns either true or false.";  // untranslated
messages["LOGIC_BOOLEAN_TRUE"] = "verdadeiro";
messages["LOGIC_COMPARE_HELPURL"] = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";  // untranslated
messages["LOGIC_COMPARE_TOOLTIP_EQ"] = "Return true if both inputs equal each other.";  // untranslated
messages["LOGIC_COMPARE_TOOLTIP_GT"] = "Return true if the first input is greater than the second input.";  // untranslated
messages["LOGIC_COMPARE_TOOLTIP_GTE"] = "Return true if the first input is greater than or equal to the second input.";  // untranslated
messages["LOGIC_COMPARE_TOOLTIP_LT"] = "Return true if the first input is smaller than the second input.";  // untranslated
messages["LOGIC_COMPARE_TOOLTIP_LTE"] = "Return true if the first input is smaller than or equal to the second input.";  // untranslated
messages["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Return true if both inputs are not equal to each other.";  // untranslated
messages["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
messages["LOGIC_NEGATE_TITLE"] = "non %1";
messages["LOGIC_NEGATE_TOOLTIP"] = "Returns true if the input is false. Returns false if the input is true.";  // untranslated
messages["LOGIC_NULL"] = "nulo";
messages["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
messages["LOGIC_NULL_TOOLTIP"] = "Retornar nulo.";
messages["LOGIC_OPERATION_AND"] = "e";
messages["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
messages["LOGIC_OPERATION_OR"] = "ou";
messages["LOGIC_OPERATION_TOOLTIP_AND"] = "Return true if both inputs are true.";  // untranslated
messages["LOGIC_OPERATION_TOOLTIP_OR"] = "Return true if at least one of the inputs is true.";  // untranslated
messages["LOGIC_TERNARY_CONDITION"] = "proba";
messages["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
messages["LOGIC_TERNARY_IF_FALSE"] = "se falso";
messages["LOGIC_TERNARY_IF_TRUE"] = "se verdadeiro";
messages["LOGIC_TERNARY_TOOLTIP"] = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";  // untranslated
messages["MATH_ADDITION_SYMBOL"] = "+";  // untranslated
messages["MATH_ARITHMETIC_HELPURL"] = "https://gl.wikipedia.org/wiki/Aritmética";
messages["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Retorna a suma de dous números.";
messages["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Retorna o cociente da división de dous números.";
messages["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Retorna a diferenza de dous números.";
messages["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Retorna o produto de dous números.";
messages["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Retorna o primeiro número elevado á potencia do segundo número.";
messages["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";  // untranslated
messages["MATH_ATAN2_TITLE"] = "atan2 of X:%1 Y:%2";  // untranslated
messages["MATH_ATAN2_TOOLTIP"] = "Return the arctangent of point (X, Y) in degrees from -180 to 180.";  // untranslated
messages["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";  // untranslated
messages["MATH_CHANGE_TITLE"] = "mudar %1 por %2";
messages["MATH_CHANGE_TOOLTIP"] = "Suma un número á variábel '%1'.";
messages["MATH_CONSTANT_HELPURL"] = "https://gl.wikipedia.org/wiki/Constante_matemática";
messages["MATH_CONSTANT_TOOLTIP"] = "Retorna unha das constantes comúns: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), ou ∞ (infinito).";
messages["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
messages["MATH_CONSTRAIN_TITLE"] = "constrain %1 low %2 high %3";  // untranslated
messages["MATH_CONSTRAIN_TOOLTIP"] = "Constrain a number to be between the specified limits (inclusive).";  // untranslated
messages["MATH_DIVISION_SYMBOL"] = "÷";  // untranslated
messages["MATH_IS_DIVISIBLE_BY"] = "é divisíbel por";
messages["MATH_IS_EVEN"] = "é par";
messages["MATH_IS_NEGATIVE"] = "é negativo";
messages["MATH_IS_ODD"] = "é impar";
messages["MATH_IS_POSITIVE"] = "é positivo";
messages["MATH_IS_PRIME"] = "é primo";
messages["MATH_IS_TOOLTIP"] = "Verifica se un número é par, impar, primo, enteiro, positivo, negativo, ou se é divisíbel por outro número.  Retorna verdadeiro ou falso.";
messages["MATH_IS_WHOLE"] = "é enteiro";
messages["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";  // untranslated
messages["MATH_MODULO_TITLE"] = "remainder of %1 ÷ %2";  // untranslated
messages["MATH_MODULO_TOOLTIP"] = "Return the remainder from dividing the two numbers.";  // untranslated
messages["MATH_MULTIPLICATION_SYMBOL"] = "×";  // untranslated
messages["MATH_NUMBER_HELPURL"] = "https://en.wikipedia.org/wiki/Number";  // untranslated
messages["MATH_NUMBER_TOOLTIP"] = "Un número.";
messages["MATH_ONLIST_HELPURL"] = "";  // untranslated
messages["MATH_ONLIST_OPERATOR_AVERAGE"] = "media dunha listaxe";
messages["MATH_ONLIST_OPERATOR_MAX"] = "maior dunha listaxe";
messages["MATH_ONLIST_OPERATOR_MEDIAN"] = "median of list";  // untranslated
messages["MATH_ONLIST_OPERATOR_MIN"] = "menor dunha listaxe";
messages["MATH_ONLIST_OPERATOR_MODE"] = "modes of list";  // untranslated
messages["MATH_ONLIST_OPERATOR_RANDOM"] = "random item of list";  // untranslated
messages["MATH_ONLIST_OPERATOR_STD_DEV"] = "standard deviation of list";  // untranslated
messages["MATH_ONLIST_OPERATOR_SUM"] = "suma da listaxe";
messages["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Return the average (arithmetic mean) of the numeric values in the list.";  // untranslated
messages["MATH_ONLIST_TOOLTIP_MAX"] = "Retorna o maior número da listaxe";
messages["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Return the median number in the list.";  // untranslated
messages["MATH_ONLIST_TOOLTIP_MIN"] = "Retorna o menor número da listaxe.";
messages["MATH_ONLIST_TOOLTIP_MODE"] = "Return a list of the most common item(s) in the list.";  // untranslated
messages["MATH_ONLIST_TOOLTIP_RANDOM"] = "Return a random element from the list.";  // untranslated
messages["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Return the standard deviation of the list.";  // untranslated
messages["MATH_ONLIST_TOOLTIP_SUM"] = "Retorna a suma de tódolos números da listaxe.";
messages["MATH_POWER_SYMBOL"] = "^";  // untranslated
messages["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";  // untranslated
messages["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "random fraction";  // untranslated
messages["MATH_RANDOM_FLOAT_TOOLTIP"] = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";  // untranslated
messages["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";  // untranslated
messages["MATH_RANDOM_INT_TITLE"] = "random integer from %1 to %2";  // untranslated
messages["MATH_RANDOM_INT_TOOLTIP"] = "Return a random integer between the two specified limits, inclusive.";  // untranslated
messages["MATH_ROUND_HELPURL"] = "https://gl.wikipedia.org/wiki/Arredondamento";
messages["MATH_ROUND_OPERATOR_ROUND"] = "arredonda";
messages["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "arredonda cara abaixo";
messages["MATH_ROUND_OPERATOR_ROUNDUP"] = "arredonda cara arriba";
messages["MATH_ROUND_TOOLTIP"] = "Arredonda un número cara enriba ou cara abaixo.";
messages["MATH_SINGLE_HELPURL"] = "https://gl.wikipedia.org/wiki/Raíz_cadrada";
messages["MATH_SINGLE_OP_ABSOLUTE"] = "absoluto";
messages["MATH_SINGLE_OP_ROOT"] = "raíz cadrada";
messages["MATH_SINGLE_TOOLTIP_ABS"] = "Retorna o valor absoluto dun número.";
messages["MATH_SINGLE_TOOLTIP_EXP"] = "Retorna o número e elevado á potencia dun número.";
messages["MATH_SINGLE_TOOLTIP_LN"] = "Retorna o logarítmo natural dun número.";
messages["MATH_SINGLE_TOOLTIP_LOG10"] = "Retorna o logarítmo en base 10 dun número.";
messages["MATH_SINGLE_TOOLTIP_NEG"] = "Retorna o oposto dun número.";
messages["MATH_SINGLE_TOOLTIP_POW10"] = "Retorna 10 elevado á potencia dun número.";
messages["MATH_SINGLE_TOOLTIP_ROOT"] = "Retorna a raíz cadrada dun número.";
messages["MATH_SUBTRACTION_SYMBOL"] = "-";  // untranslated
messages["MATH_TRIG_ACOS"] = "acos";  // untranslated
messages["MATH_TRIG_ASIN"] = "asin";  // untranslated
messages["MATH_TRIG_ATAN"] = "atan";  // untranslated
messages["MATH_TRIG_COS"] = "cos";  // untranslated
messages["MATH_TRIG_HELPURL"] = "https://gl.m.wikipedia.org/wiki/Función_trigonométrica";
messages["MATH_TRIG_SIN"] = "sin";  // untranslated
messages["MATH_TRIG_TAN"] = "tan";  // untranslated
messages["MATH_TRIG_TOOLTIP_ACOS"] = "Retorna o arco coseno dun número.";
messages["MATH_TRIG_TOOLTIP_ASIN"] = "Retorna o arco seno dum número.";
messages["MATH_TRIG_TOOLTIP_ATAN"] = "Retorna o arco tanxente dun número.";
messages["MATH_TRIG_TOOLTIP_COS"] = "Retorna o coseno dun grao (non radiano).";
messages["MATH_TRIG_TOOLTIP_SIN"] = "Retorna o seno dun grao (non radiano).";
messages["MATH_TRIG_TOOLTIP_TAN"] = "Retorna a tanxente dun grao (non radiano).";
messages["NEW_COLOUR_VARIABLE"] = "Create colour variable...";  // untranslated
messages["NEW_NUMBER_VARIABLE"] = "Create number variable...";  // untranslated
messages["NEW_STRING_VARIABLE"] = "Crar unha variábel de cadea...";
messages["NEW_VARIABLE"] = "Crear a variable...";
messages["NEW_VARIABLE_TITLE"] = "Nome da nova variable:";
messages["NEW_VARIABLE_TYPE_TITLE"] = "New variable type:";  // untranslated
messages["ORDINAL_NUMBER_SUFFIX"] = "";  // untranslated
messages["PROCEDURES_ALLOW_STATEMENTS"] = "allow statements";  // untranslated
messages["PROCEDURES_BEFORE_PARAMS"] = "con:";
messages["PROCEDURES_CALLNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
messages["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Run the user-defined function '%1'.";  // untranslated
messages["PROCEDURES_CALLRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
messages["PROCEDURES_CALLRETURN_TOOLTIP"] = "Run the user-defined function '%1' and use its output.";  // untranslated
messages["PROCEDURES_CALL_BEFORE_PARAMS"] = "con:";
messages["PROCEDURES_CREATE_DO"] = "Create '%1'";  // untranslated
messages["PROCEDURES_DEFNORETURN_COMMENT"] = "Describe this function...";  // untranslated
messages["PROCEDURES_DEFNORETURN_DO"] = "";  // untranslated
messages["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
messages["PROCEDURES_DEFNORETURN_PROCEDURE"] = "facer algo";
messages["PROCEDURES_DEFNORETURN_TITLE"] = "cara";
messages["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Creates a function with no output.";  // untranslated
messages["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
messages["PROCEDURES_DEFRETURN_RETURN"] = "retornar";
messages["PROCEDURES_DEFRETURN_TOOLTIP"] = "Creates a function with an output.";  // untranslated
messages["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Warning: This function has duplicate parameters.";  // untranslated
messages["PROCEDURES_HIGHLIGHT_DEF"] = "Highlight function definition";  // untranslated
messages["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
messages["PROCEDURES_IFRETURN_TOOLTIP"] = "If a value is true, then return a second value.";  // untranslated
messages["PROCEDURES_IFRETURN_WARNING"] = "Warning: This block may be used only within a function definition.";  // untranslated
messages["PROCEDURES_MUTATORARG_TITLE"] = "input name:";  // untranslated
messages["PROCEDURES_MUTATORARG_TOOLTIP"] = "Add an input to the function.";  // untranslated
messages["PROCEDURES_MUTATORCONTAINER_TITLE"] = "entradas";
messages["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Add, remove, or reorder inputs to this function.";  // untranslated
messages["REDO"] = "Refacer";
messages["REMOVE_COMMENT"] = "Eliminar o comentario";
messages["RENAME_VARIABLE"] = "Renomear a variable...";
messages["RENAME_VARIABLE_TITLE"] = "Renomear todas as variables \"%1\" a:";
messages["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
messages["TEXT_APPEND_TITLE"] = "to %1 append text %2";  // untranslated
messages["TEXT_APPEND_TOOLTIP"] = "Append some text to variable '%1'.";  // untranslated
messages["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
messages["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "to lower case";  // untranslated
messages["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "to Title Case";  // untranslated
messages["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "to UPPER CASE";  // untranslated
messages["TEXT_CHANGECASE_TOOLTIP"] = "Return a copy of the text in a different case.";  // untranslated
messages["TEXT_CHARAT_FIRST"] = "get first letter";  // untranslated
messages["TEXT_CHARAT_FROM_END"] = "get letter # from end";  // untranslated
messages["TEXT_CHARAT_FROM_START"] = "get letter #";  // untranslated
messages["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
messages["TEXT_CHARAT_LAST"] = "get last letter";  // untranslated
messages["TEXT_CHARAT_RANDOM"] = "get random letter";  // untranslated
messages["TEXT_CHARAT_TAIL"] = "";  // untranslated
messages["TEXT_CHARAT_TITLE"] = "in text %1 %2";  // untranslated
messages["TEXT_CHARAT_TOOLTIP"] = "Returns the letter at the specified position.";  // untranslated
messages["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";  // untranslated
messages["TEXT_COUNT_MESSAGE0"] = "count %1 in %2";  // untranslated
messages["TEXT_COUNT_TOOLTIP"] = "Count how many times some text occurs within some other text.";  // untranslated
messages["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Add an item to the text.";  // untranslated
messages["TEXT_CREATE_JOIN_TITLE_JOIN"] = "unir";
messages["TEXT_CREATE_JOIN_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this text block.";  // untranslated
messages["TEXT_GET_SUBSTRING_END_FROM_END"] = "to letter # from end";  // untranslated
messages["TEXT_GET_SUBSTRING_END_FROM_START"] = "to letter #";  // untranslated
messages["TEXT_GET_SUBSTRING_END_LAST"] = "to last letter";  // untranslated
messages["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
messages["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "no texto";
messages["TEXT_GET_SUBSTRING_START_FIRST"] = "get substring from first letter";  // untranslated
messages["TEXT_GET_SUBSTRING_START_FROM_END"] = "get substring from letter # from end";  // untranslated
messages["TEXT_GET_SUBSTRING_START_FROM_START"] = "get substring from letter #";  // untranslated
messages["TEXT_GET_SUBSTRING_TAIL"] = "";  // untranslated
messages["TEXT_GET_SUBSTRING_TOOLTIP"] = "Returns a specified portion of the text.";  // untranslated
messages["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
messages["TEXT_INDEXOF_OPERATOR_FIRST"] = "find first occurrence of text";  // untranslated
messages["TEXT_INDEXOF_OPERATOR_LAST"] = "find last occurrence of text";  // untranslated
messages["TEXT_INDEXOF_TITLE"] = "in text %1 %2 %3";  // untranslated
messages["TEXT_INDEXOF_TOOLTIP"] = "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";  // untranslated
messages["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
messages["TEXT_ISEMPTY_TITLE"] = "%1 is empty";  // untranslated
messages["TEXT_ISEMPTY_TOOLTIP"] = "Returns true if the provided text is empty.";  // untranslated
messages["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
messages["TEXT_JOIN_TITLE_CREATEWITH"] = "create text with";  // untranslated
messages["TEXT_JOIN_TOOLTIP"] = "Create a piece of text by joining together any number of items.";  // untranslated
messages["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
messages["TEXT_LENGTH_TITLE"] = "length of %1";  // untranslated
messages["TEXT_LENGTH_TOOLTIP"] = "Returns the number of letters (including spaces) in the provided text.";  // untranslated
messages["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
messages["TEXT_PRINT_TITLE"] = "imprime %1";
messages["TEXT_PRINT_TOOLTIP"] = "Print the specified text, number or other value.";  // untranslated
messages["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
messages["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Prompt for user for a number.";  // untranslated
messages["TEXT_PROMPT_TOOLTIP_TEXT"] = "Prompt for user for some text.";  // untranslated
messages["TEXT_PROMPT_TYPE_NUMBER"] = "prompt for number with message";  // untranslated
messages["TEXT_PROMPT_TYPE_TEXT"] = "prompt for text with message";  // untranslated
messages["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";  // untranslated
messages["TEXT_REPLACE_MESSAGE0"] = "replace %1 with %2 in %3";  // untranslated
messages["TEXT_REPLACE_TOOLTIP"] = "Replace all occurances of some text within some other text.";  // untranslated
messages["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";  // untranslated
messages["TEXT_REVERSE_MESSAGE0"] = "reverse %1";  // untranslated
messages["TEXT_REVERSE_TOOLTIP"] = "Reverses the order of the characters in the text.";  // untranslated
messages["TEXT_TEXT_HELPURL"] = "https://en.wikipedia.org/wiki/String_(computer_science)";  // untranslated
messages["TEXT_TEXT_TOOLTIP"] = "A letter, word, or line of text.";  // untranslated
messages["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
messages["TEXT_TRIM_OPERATOR_BOTH"] = "trim spaces from both sides of";  // untranslated
messages["TEXT_TRIM_OPERATOR_LEFT"] = "trim spaces from left side of";  // untranslated
messages["TEXT_TRIM_OPERATOR_RIGHT"] = "trim spaces from right side of";  // untranslated
messages["TEXT_TRIM_TOOLTIP"] = "Return a copy of the text with spaces removed from one or both ends.";  // untranslated
messages["TODAY"] = "Hoxe";
messages["UNDO"] = "Desfacer";
messages["UNNAMED_KEY"] = "innominada";
messages["VARIABLES_DEFAULT_NAME"] = "elemento";
messages["VARIABLES_GET_CREATE_SET"] = "Create 'set %1'";  // untranslated
messages["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
messages["VARIABLES_GET_TOOLTIP"] = "Returns the value of this variable.";  // untranslated
messages["VARIABLES_SET"] = "set %1 to %2";  // untranslated
messages["VARIABLES_SET_CREATE_GET"] = "Create 'get %1'";  // untranslated
messages["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
messages["VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";  // untranslated
messages["VARIABLE_ALREADY_EXISTS"] = "A variable named '%1' already exists.";  // untranslated
messages["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "A variable named '%1' already exists for another type: '%2'.";  // untranslated
messages["WORKSPACE_ARIA_LABEL"] = "Blockly Workspace";  // untranslated
messages["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Say something...";  // untranslated
messages["CONTROLS_FOREACH_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_FOR_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = messages["CONTROLS_IF_MSG_ELSEIF"];
messages["CONTROLS_IF_ELSE_TITLE_ELSE"] = messages["CONTROLS_IF_MSG_ELSE"];
messages["CONTROLS_IF_IF_TITLE_IF"] = messages["CONTROLS_IF_MSG_IF"];
messages["CONTROLS_IF_MSG_THEN"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_WHILEUNTIL_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["LISTS_CREATE_WITH_ITEM_TITLE"] = messages["VARIABLES_DEFAULT_NAME"];
messages["LISTS_GET_INDEX_HELPURL"] = messages["LISTS_INDEX_OF_HELPURL"];
messages["LISTS_GET_INDEX_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_INDEX_OF_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_SET_INDEX_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["MATH_CHANGE_TITLE_ITEM"] = messages["VARIABLES_DEFAULT_NAME"];
messages["PROCEDURES_DEFRETURN_COMMENT"] = messages["PROCEDURES_DEFNORETURN_COMMENT"];
messages["PROCEDURES_DEFRETURN_DO"] = messages["PROCEDURES_DEFNORETURN_DO"];
messages["PROCEDURES_DEFRETURN_PROCEDURE"] = messages["PROCEDURES_DEFNORETURN_PROCEDURE"];
messages["PROCEDURES_DEFRETURN_TITLE"] = messages["PROCEDURES_DEFNORETURN_TITLE"];
messages["TEXT_APPEND_VARIABLE"] = messages["VARIABLES_DEFAULT_NAME"];
messages["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = messages["VARIABLES_DEFAULT_NAME"];

messages["MATH_HUE"] = "230";
messages["LOOPS_HUE"] = "120";
messages["LISTS_HUE"] = "260";
messages["LOGIC_HUE"] = "210";
messages["VARIABLES_HUE"] = "330";
messages["TEXTS_HUE"] = "160";
messages["PROCEDURES_HUE"] = "290";
messages["COLOUR_HUE"] = "20";
messages["VARIABLES_DYNAMIC_HUE"] = "310";