// This file was automatically generated.  Do not modify.

'use strict';

const messages = Object.create(null);

messages["ADD_COMMENT"] = "Aggiungi commento";
messages["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Non si può cancellare la variabile '%1' perché è parte della definizione della funzione '%2'";
messages["CHANGE_VALUE_TITLE"] = "Modifica valore:";
messages["CLEAN_UP"] = "Pulisci i blocchi";
messages["COLLAPSED_WARNINGS_WARNING"] = "I blocchi compressi contengono avvertimenti.";
messages["COLLAPSE_ALL"] = "Comprimi blocchi";
messages["COLLAPSE_BLOCK"] = "Comprimi blocco";
messages["COLOUR_BLEND_COLOUR1"] = "colore 1";
messages["COLOUR_BLEND_COLOUR2"] = "colore 2";
messages["COLOUR_BLEND_HELPURL"] = "https://meyerweb.com/eric/tools/color-blend/#:::rgbp";  // untranslated
messages["COLOUR_BLEND_RATIO"] = "rapporto";
messages["COLOUR_BLEND_TITLE"] = "miscela";
messages["COLOUR_BLEND_TOOLTIP"] = "Mescola due colori insieme con un determinato rapporto (0.0 - 1.0).";
messages["COLOUR_PICKER_HELPURL"] = "https://it.wikipedia.org/wiki/Colore";
messages["COLOUR_PICKER_TOOLTIP"] = "Scegli un colore dalla tavolozza.";
messages["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
messages["COLOUR_RANDOM_TITLE"] = "colore casuale";
messages["COLOUR_RANDOM_TOOLTIP"] = "Scegli un colore a caso.";
messages["COLOUR_RGB_BLUE"] = "blu";
messages["COLOUR_RGB_GREEN"] = "verde";
messages["COLOUR_RGB_HELPURL"] = "https://www.december.com/html/spec/colorpercompact.html";  // untranslated
messages["COLOUR_RGB_RED"] = "rosso";
messages["COLOUR_RGB_TITLE"] = "colora con";
messages["COLOUR_RGB_TOOLTIP"] = "Crea un colore con la quantità specificata di rosso, verde e blu. Tutti i valori devono essere compresi tra 0 e 100.";
messages["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
messages["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "esce dal ciclo";
messages["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "prosegui con la successiva iterazione del ciclo";
messages["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Esce dal ciclo.";
messages["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Salta il resto di questo ciclo e prosegue con la successiva iterazione.";
messages["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Attenzioneː Questo blocco può essere usato solo in un ciclo.";
messages["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
messages["CONTROLS_FOREACH_TITLE"] = "per ogni elemento %1 nella lista %2";
messages["CONTROLS_FOREACH_TOOLTIP"] = "Per ogni elemento in una lista, imposta la variabile '%1'  pari all'elemento e quindi esegue alcune istruzioni.";
messages["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
messages["CONTROLS_FOR_TITLE"] = "conta con %1 da %2 a %3 per %4";
messages["CONTROLS_FOR_TOOLTIP"] = "Fa sì che la variabile '%1' prenda tutti i valori a partire dal numero di partenza fino a quello di arrivo, con passo pari all'intervallo specificato, ed esegue il blocco indicato.";
messages["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Aggiungi una condizione al blocco se.";
messages["CONTROLS_IF_ELSE_TOOLTIP"] = "Aggiungi una condizione finale pigliatutto al blocco se.";
messages["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
messages["CONTROLS_IF_IF_TOOLTIP"] = "Aggiungi, elimina o riordina le sezioni per riconfigurare questo blocco se.";
messages["CONTROLS_IF_MSG_ELSE"] = "altrimenti";
messages["CONTROLS_IF_MSG_ELSEIF"] = "altrimenti se";
messages["CONTROLS_IF_MSG_IF"] = "se";
messages["CONTROLS_IF_TOOLTIP_1"] = "Se un valore è vero allora esegue alcune istruzioni.";
messages["CONTROLS_IF_TOOLTIP_2"] = "Se un valore è vero allora esegue il primo blocco di istruzioni. Altrimenti esegue il secondo blocco di istruzioni.";
messages["CONTROLS_IF_TOOLTIP_3"] = "Se il primo valore è vero allora esegue un primo blocco di istruzioni. Altrimenti, se il secondo valore è vero, esegue un secondo blocco di istruzioni.";
messages["CONTROLS_IF_TOOLTIP_4"] = "Se il primo valore è vero allora esegue un primo blocco di istruzioni. Altrimenti, se il secondo valore è vero, esegue un secondo blocco di istruzioni. Se nessuno dei valori è vero esegue l'ultimo blocco di istruzioni.";
messages["CONTROLS_REPEAT_HELPURL"] = "https://it.wikipedia.org/wiki/Ciclo_for";
messages["CONTROLS_REPEAT_INPUT_DO"] = "fai";
messages["CONTROLS_REPEAT_TITLE"] = "ripeti %1 volte";
messages["CONTROLS_REPEAT_TOOLTIP"] = "Esegue alcune istruzione diverse volte.";
messages["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
messages["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "ripeti fino a che";
messages["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "ripeti mentre";
messages["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Finché un valore è falso, esegue alcune istruzioni.";
messages["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Finché un valore è vero, esegue alcune istruzioni.";
messages["DELETE_ALL_BLOCKS"] = "Cancellare tutti i %1 blocchi?";
messages["DELETE_BLOCK"] = "Cancella blocco";
messages["DELETE_VARIABLE"] = "Cancella la variabile '%1'";
messages["DELETE_VARIABLE_CONFIRMATION"] = "Cancella %1 usi della variabile '%2'?";
messages["DELETE_X_BLOCKS"] = "Cancella %1 blocchi";
messages["DIALOG_CANCEL"] = "Annulla";
messages["DIALOG_OK"] = "OK";
messages["DISABLE_BLOCK"] = "Disattiva blocco";
messages["DUPLICATE_BLOCK"] = "Duplica";
messages["DUPLICATE_COMMENT"] = "Duplica commento";
messages["ENABLE_BLOCK"] = "Attiva blocco";
messages["EXPAND_ALL"] = "Espandi blocchi";
messages["EXPAND_BLOCK"] = "Espandi blocco";
messages["EXTERNAL_INPUTS"] = "Ingressi esterni";
messages["HELP"] = "Aiuto";
messages["INLINE_INPUTS"] = "Ingressi in linea";
messages["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
messages["LISTS_CREATE_EMPTY_TITLE"] = "crea lista vuota";
messages["LISTS_CREATE_EMPTY_TOOLTIP"] = "Restituisce una lista, di lunghezza 0, contenente nessun record di dati";
messages["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "lista";
messages["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Aggiungi, rimuovi o riordina le sezioni per riconfigurare il blocco lista.";
messages["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
messages["LISTS_CREATE_WITH_INPUT_WITH"] = "crea lista con";
messages["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Aggiunge un elemento alla lista.";
messages["LISTS_CREATE_WITH_TOOLTIP"] = "Crea una lista con un certo numero di elementi.";
messages["LISTS_GET_INDEX_FIRST"] = "primo";
messages["LISTS_GET_INDEX_FROM_END"] = "# dalla fine";
messages["LISTS_GET_INDEX_FROM_START"] = "#";  // untranslated
messages["LISTS_GET_INDEX_GET"] = "prendi";
messages["LISTS_GET_INDEX_GET_REMOVE"] = "prendi e rimuovi";
messages["LISTS_GET_INDEX_LAST"] = "ultimo";
messages["LISTS_GET_INDEX_RANDOM"] = "casuale";
messages["LISTS_GET_INDEX_REMOVE"] = "rimuovi";
messages["LISTS_GET_INDEX_TAIL"] = "";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Restituisce il primo elemento in una lista.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Restituisce l'elemento nella posizione indicata della lista.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Restituisce l'ultimo elemento in una lista.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Restituisce un elemento casuale in una lista.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Rimuove e restituisce il primo elemento in una lista.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Rimuove e restituisce l'elemento nella posizione indicata in una lista.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Restituisce e rimuove l'ultimo elemento in una lista.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Restituisce e rimuove un elemento casuale in una lista.";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Rimuove il primo elemento in una lista.";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Rimuove l'elemento nella posizione indicata in una lista.";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Rimuove l'ultimo elemento in una lista.";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Rimuove un elemento casuale in una lista.";
messages["LISTS_GET_SUBLIST_END_FROM_END"] = "da # dalla fine";
messages["LISTS_GET_SUBLIST_END_FROM_START"] = "fino a #";
messages["LISTS_GET_SUBLIST_END_LAST"] = "dagli ultimi";
messages["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
messages["LISTS_GET_SUBLIST_START_FIRST"] = "prendi sotto-lista dall'inizio";
messages["LISTS_GET_SUBLIST_START_FROM_END"] = "prendi sotto-lista da # dalla fine";
messages["LISTS_GET_SUBLIST_START_FROM_START"] = "prendi sotto-lista da #";
messages["LISTS_GET_SUBLIST_TAIL"] = "";  // untranslated
messages["LISTS_GET_SUBLIST_TOOLTIP"] = "Crea una copia della porzione specificata di una lista.";
messages["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 corrisponde all'ultimo elemento.";
messages["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 corrisponde al primo elemento.";
messages["LISTS_INDEX_OF_FIRST"] = "trova la prima occorrenza dell'elemento";
messages["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
messages["LISTS_INDEX_OF_LAST"] = "trova l'ultima occorrenza dell'elemento";
messages["LISTS_INDEX_OF_TOOLTIP"] = "Restituisce l'indice della prima/ultima occorrenza dell'elemento nella lista. Restituisce %1 se l'elemento non viene trovato.";
messages["LISTS_INLIST"] = "nella lista";
messages["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
messages["LISTS_ISEMPTY_TITLE"] = "%1 è vuota";
messages["LISTS_ISEMPTY_TOOLTIP"] = "Restituisce vero se la lista è vuota.";
messages["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
messages["LISTS_LENGTH_TITLE"] = "lunghezza di %1";
messages["LISTS_LENGTH_TOOLTIP"] = "Restituisce la lunghezza della lista";
messages["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
messages["LISTS_REPEAT_TITLE"] = "crea una lista con l'elemento %1 ripetuto %2 volte";
messages["LISTS_REPEAT_TOOLTIP"] = "Crea una lista costituita dal valore indicato ripetuto per il numero di volte specificato.";
messages["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";  // untranslated
messages["LISTS_REVERSE_MESSAGE0"] = "inverti %1";
messages["LISTS_REVERSE_TOOLTIP"] = "Inverti una copia di un elenco.";
messages["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
messages["LISTS_SET_INDEX_INPUT_TO"] = "come";
messages["LISTS_SET_INDEX_INSERT"] = "inserisci in";
messages["LISTS_SET_INDEX_SET"] = "imposta";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Inserisci l'elemento all'inizio della lista.";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Inserisci un elemento nella posizione indicata in una lista.";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Aggiungi un elemento alla fine di una lista";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Inserisce l'elemento casualmente in una lista.";
messages["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Imposta il primo elemento in una lista.";
messages["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Imposta l'elemento nella posizione indicata di una lista.";
messages["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Imposta l'ultimo elemento in una lista.";
messages["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Imposta un elemento casuale in una lista.";
messages["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
messages["LISTS_SORT_ORDER_ASCENDING"] = "crescente";
messages["LISTS_SORT_ORDER_DESCENDING"] = "decrescente";
messages["LISTS_SORT_TITLE"] = "ordinamento %1 %2 %3";
messages["LISTS_SORT_TOOLTIP"] = "Ordina una copia di un elenco.";
messages["LISTS_SORT_TYPE_IGNORECASE"] = "alfabetico, ignorare differenze maiuscole e minuscole";
messages["LISTS_SORT_TYPE_NUMERIC"] = "numerico";
messages["LISTS_SORT_TYPE_TEXT"] = "alfabetico";
messages["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
messages["LISTS_SPLIT_LIST_FROM_TEXT"] = "crea lista da testo";
messages["LISTS_SPLIT_TEXT_FROM_LIST"] = "crea testo da lista";
messages["LISTS_SPLIT_TOOLTIP_JOIN"] = "Unisci una lista di testi in un unico testo, separato da un delimitatore.";
messages["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Dividi il testo in un elenco di testi, interrompendo ad ogni delimitatore.";
messages["LISTS_SPLIT_WITH_DELIMITER"] = "con delimitatore";
messages["LOGIC_BOOLEAN_FALSE"] = "falso";
messages["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
messages["LOGIC_BOOLEAN_TOOLTIP"] = "Restituisce vero o falso.";
messages["LOGIC_BOOLEAN_TRUE"] = "vero";
messages["LOGIC_COMPARE_HELPURL"] = "https://it.wikipedia.org/wiki/Disuguaglianza";
messages["LOGIC_COMPARE_TOOLTIP_EQ"] = "Restituisce vero se gli input sono uno uguale all'altro.";
messages["LOGIC_COMPARE_TOOLTIP_GT"] = "Restituisce vero se il primo input è maggiore o uguale al secondo.";
messages["LOGIC_COMPARE_TOOLTIP_GTE"] = "Restituisce uguale se il primo input è maggiore o uguale al secondo input.";
messages["LOGIC_COMPARE_TOOLTIP_LT"] = "Restituisce vero se il primo input è minore del secondo.";
messages["LOGIC_COMPARE_TOOLTIP_LTE"] = "Restituisce vero se il primo input è minore o uguale al secondo.";
messages["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Restituisce vero se gli input non sono uno uguale all'altro.";
messages["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
messages["LOGIC_NEGATE_TITLE"] = "non %1";
messages["LOGIC_NEGATE_TOOLTIP"] = "Restituisce vero se l'input è falso. Restituisce falso se l'input è vero.";
messages["LOGIC_NULL"] = "nullo";
messages["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
messages["LOGIC_NULL_TOOLTIP"] = "Restituisce valore nullo.";
messages["LOGIC_OPERATION_AND"] = "e";
messages["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
messages["LOGIC_OPERATION_OR"] = "o";
messages["LOGIC_OPERATION_TOOLTIP_AND"] = "Restituisce vero se entrambi gli input sono veri.";
messages["LOGIC_OPERATION_TOOLTIP_OR"] = "Restituisce vero se almeno uno degli input è vero.";
messages["LOGIC_TERNARY_CONDITION"] = "test";
messages["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
messages["LOGIC_TERNARY_IF_FALSE"] = "se falso";
messages["LOGIC_TERNARY_IF_TRUE"] = "se vero";
messages["LOGIC_TERNARY_TOOLTIP"] = "Verifica la condizione in 'test'. Se questa è vera restituisce il valore 'se vero' altrimenti restituisce il valore 'se falso'.";
messages["MATH_ADDITION_SYMBOL"] = "+";  // untranslated
messages["MATH_ARITHMETIC_HELPURL"] = "https://it.wikipedia.org/wiki/Aritmetica";
messages["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Restituisce la somma dei due numeri.";
messages["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Restituisce il quoziente dei due numeri.";
messages["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Restituisce la differenza dei due numeri.";
messages["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Restituisce il prodotto dei due numeri.";
messages["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Restituisce il primo numero elevato alla potenza del secondo numero.";
messages["MATH_ATAN2_HELPURL"] = "https://it.wikipedia.org/wiki/Arcotangente2";
messages["MATH_ATAN2_TITLE"] = "atan2 di X:%1 Y:%2";
messages["MATH_ATAN2_TOOLTIP"] = "Restituisce l'arcotangente del punto (X, Y) in gradi da -180 a 180.";
messages["MATH_CHANGE_HELPURL"] = "https://it.wikipedia.org/wiki/Addizione";
messages["MATH_CHANGE_TITLE"] = "cambia %1 di %2";
messages["MATH_CHANGE_TOOLTIP"] = "Aggiunge un numero alla variabile '%1'.";
messages["MATH_CONSTANT_HELPURL"] = "https://it.wikipedia.org/wiki/Costante_matematica";
messages["MATH_CONSTANT_TOOLTIP"] = "Restituisce una delle costanti comuniː π (3.141…), e (2.718…), φ (1.618…), radq(2) (1.414…), radq(½) (0.707…) o ∞ (infinito).";
messages["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
messages["MATH_CONSTRAIN_TITLE"] = "costringi %1 da %2 a %3";
messages["MATH_CONSTRAIN_TOOLTIP"] = "Costringe un numero all'interno dei limiti indicati (compresi).";
messages["MATH_DIVISION_SYMBOL"] = "÷";  // untranslated
messages["MATH_IS_DIVISIBLE_BY"] = "è divisibile per";
messages["MATH_IS_EVEN"] = "è pari";
messages["MATH_IS_NEGATIVE"] = "è negativo";
messages["MATH_IS_ODD"] = "è dispari";
messages["MATH_IS_POSITIVE"] = "è positivo";
messages["MATH_IS_PRIME"] = "è primo";
messages["MATH_IS_TOOLTIP"] = "Verifica se un numero è pari, dispari, primo, intero, positivo, negativo o se è divisibile per un certo numero. Restituisce vero o falso.";
messages["MATH_IS_WHOLE"] = "è intero";
messages["MATH_MODULO_HELPURL"] = "https://it.wikipedia.org/wiki/Resto";
messages["MATH_MODULO_TITLE"] = "resto di %1 ÷ %2";
messages["MATH_MODULO_TOOLTIP"] = "Restituisce il resto della divisione di due numeri.";
messages["MATH_MULTIPLICATION_SYMBOL"] = "×";  // untranslated
messages["MATH_NUMBER_HELPURL"] = "https://it.wikipedia.org/wiki/Numero";
messages["MATH_NUMBER_TOOLTIP"] = "Un numero.";
messages["MATH_ONLIST_HELPURL"] = "";  // untranslated
messages["MATH_ONLIST_OPERATOR_AVERAGE"] = "media della lista";
messages["MATH_ONLIST_OPERATOR_MAX"] = "massimo della lista";
messages["MATH_ONLIST_OPERATOR_MEDIAN"] = "mediana della lista";
messages["MATH_ONLIST_OPERATOR_MIN"] = "minimo della lista";
messages["MATH_ONLIST_OPERATOR_MODE"] = "mode della lista";
messages["MATH_ONLIST_OPERATOR_RANDOM"] = "elemento casuale della lista";
messages["MATH_ONLIST_OPERATOR_STD_DEV"] = "deviazione standard della lista";
messages["MATH_ONLIST_OPERATOR_SUM"] = "somma la lista";
messages["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Restituisce la media (media aritmetica) dei valori numerici nella lista.";
messages["MATH_ONLIST_TOOLTIP_MAX"] = "Restituisce il più grande numero della lista.";
messages["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Restituisce il valore mediano della lista.";
messages["MATH_ONLIST_TOOLTIP_MIN"] = "Restituisce il più piccolo numero della lista.";
messages["MATH_ONLIST_TOOLTIP_MODE"] = "Restituisce una lista degli elementi più frequenti nella lista.";
messages["MATH_ONLIST_TOOLTIP_RANDOM"] = "Restituisce un elemento casuale della lista.";
messages["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Restituisce la deviazione standard della lista.";
messages["MATH_ONLIST_TOOLTIP_SUM"] = "Restituisce la somma si tutti i numeri nella lista.";
messages["MATH_POWER_SYMBOL"] = "^";  // untranslated
messages["MATH_RANDOM_FLOAT_HELPURL"] = "https://it.wikipedia.org/wiki/Numeri_pseudo-casuali";
messages["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "frazione casuale";
messages["MATH_RANDOM_FLOAT_TOOLTIP"] = "Restituisce una frazione compresa fra 0.0 (incluso) e 1.0 (escluso).";
messages["MATH_RANDOM_INT_HELPURL"] = "https://it.wikipedia.org/wiki/Numeri_pseudo-casuali";
messages["MATH_RANDOM_INT_TITLE"] = "intero casuale da %1 a %2";
messages["MATH_RANDOM_INT_TOOLTIP"] = "Restituisce un numero intero casuale compreso tra i due limiti indicati (inclusi).";
messages["MATH_ROUND_HELPURL"] = "https://it.wikipedia.org/wiki/Arrotondamento";
messages["MATH_ROUND_OPERATOR_ROUND"] = "arrotonda";
messages["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "arrotonda verso il basso";
messages["MATH_ROUND_OPERATOR_ROUNDUP"] = "arrotonda verso l'alto";
messages["MATH_ROUND_TOOLTIP"] = "Arrotonda un numero verso l'alto o verso il basso.";
messages["MATH_SINGLE_HELPURL"] = "https://it.wikipedia.org/wiki/Radice_quadrata";
messages["MATH_SINGLE_OP_ABSOLUTE"] = "assoluto";
messages["MATH_SINGLE_OP_ROOT"] = "radice quadrata";
messages["MATH_SINGLE_TOOLTIP_ABS"] = "Restituisce il valore assoluto del numero.";
messages["MATH_SINGLE_TOOLTIP_EXP"] = "Restituisce e elevato alla potenza del numero.";
messages["MATH_SINGLE_TOOLTIP_LN"] = "Restituisce il logaritmo naturale del numero.";
messages["MATH_SINGLE_TOOLTIP_LOG10"] = "Restituisce il logaritmo in base 10 del numero.";
messages["MATH_SINGLE_TOOLTIP_NEG"] = "Restituisce l'opposto del numero.";
messages["MATH_SINGLE_TOOLTIP_POW10"] = "Restituisce 10 elevato alla potenza del numero.";
messages["MATH_SINGLE_TOOLTIP_ROOT"] = "Restituisce la radice quadrata del numero.";
messages["MATH_SUBTRACTION_SYMBOL"] = "-";  // untranslated
messages["MATH_TRIG_ACOS"] = "acos";  // untranslated
messages["MATH_TRIG_ASIN"] = "asin";  // untranslated
messages["MATH_TRIG_ATAN"] = "atan";  // untranslated
messages["MATH_TRIG_COS"] = "cos";  // untranslated
messages["MATH_TRIG_HELPURL"] = "https://it.wikipedia.org/wiki/Funzione_trigonometrica";
messages["MATH_TRIG_SIN"] = "sin";  // untranslated
messages["MATH_TRIG_TAN"] = "tan";  // untranslated
messages["MATH_TRIG_TOOLTIP_ACOS"] = "Restituisce l'arco-coseno di un numero.";
messages["MATH_TRIG_TOOLTIP_ASIN"] = "Restituisce l'arco-seno di un numero.";
messages["MATH_TRIG_TOOLTIP_ATAN"] = "Restituisce l'arco-tangente di un numero.";
messages["MATH_TRIG_TOOLTIP_COS"] = "Restituisce il coseno di un angolo espresso in gradi (non radianti).";
messages["MATH_TRIG_TOOLTIP_SIN"] = "Restituisce il seno di un angolo espresso in gradi (non radianti).";
messages["MATH_TRIG_TOOLTIP_TAN"] = "Restituisce la tangente di un angolo espresso in gradi (non radianti).";
messages["NEW_COLOUR_VARIABLE"] = "Crea variabile colore...";
messages["NEW_NUMBER_VARIABLE"] = "Crea variabile numero...";
messages["NEW_STRING_VARIABLE"] = "Crea variabile stringa...";
messages["NEW_VARIABLE"] = "Crea variabile...";
messages["NEW_VARIABLE_TITLE"] = "Nome della nuova variabile:";
messages["NEW_VARIABLE_TYPE_TITLE"] = "Tipo della nuova variabile:";
messages["ORDINAL_NUMBER_SUFFIX"] = "";  // untranslated
messages["PROCEDURES_ALLOW_STATEMENTS"] = "consenti dichiarazioni";
messages["PROCEDURES_BEFORE_PARAMS"] = "conː";
messages["PROCEDURES_CALLNORETURN_HELPURL"] = "https://it.wikipedia.org/wiki/Funzione (informatica)";
messages["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Esegue la funzione definita dall'utente '%1'.";
messages["PROCEDURES_CALLRETURN_HELPURL"] = "https://it.wikipedia.org/wiki/Funzione (informatica)";
messages["PROCEDURES_CALLRETURN_TOOLTIP"] = "Esegue la funzione definita dall'utente '%1' ed usa il suo output.";
messages["PROCEDURES_CALL_BEFORE_PARAMS"] = "conː";
messages["PROCEDURES_CREATE_DO"] = "Crea '%1'";
messages["PROCEDURES_DEFNORETURN_COMMENT"] = "Descrivi questa funzione...";
messages["PROCEDURES_DEFNORETURN_DO"] = "";  // untranslated
messages["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
messages["PROCEDURES_DEFNORETURN_PROCEDURE"] = "fai qualcosa";
messages["PROCEDURES_DEFNORETURN_TITLE"] = "per";
messages["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Crea una funzione senza output.";
messages["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
messages["PROCEDURES_DEFRETURN_RETURN"] = "ritorna";
messages["PROCEDURES_DEFRETURN_TOOLTIP"] = "Crea una funzione con un output.";
messages["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Attenzioneː Questa funzione ha parametri duplicati.";
messages["PROCEDURES_HIGHLIGHT_DEF"] = "Evidenzia definizione di funzione";
messages["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";
messages["PROCEDURES_IFRETURN_TOOLTIP"] = "Se un valore è vero allora restituisce un secondo valore.";
messages["PROCEDURES_IFRETURN_WARNING"] = "Attenzioneː Questo blocco può essere usato solo all'interno di una definizione di funzione.";
messages["PROCEDURES_MUTATORARG_TITLE"] = "nome inputː";
messages["PROCEDURES_MUTATORARG_TOOLTIP"] = "Aggiungi un input alla funzione.";
messages["PROCEDURES_MUTATORCONTAINER_TITLE"] = "input";
messages["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Aggiungi, rimuovi o riordina input alla funzione.";
messages["REDO"] = "Ripeti";
messages["REMOVE_COMMENT"] = "Rimuovi commento";
messages["RENAME_VARIABLE"] = "Rinomina variabile...";
messages["RENAME_VARIABLE_TITLE"] = "Rinomina tutte le variabili '%1' in:";
messages["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
messages["TEXT_APPEND_TITLE"] = "a %1 aggiungi il testo %2";
messages["TEXT_APPEND_TOOLTIP"] = "Aggiunge del testo alla variabile '%1'.";
messages["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
messages["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "in minuscolo";
messages["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "con Iniziali Maiuscole";
messages["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "in MAIUSCOLO";
messages["TEXT_CHANGECASE_TOOLTIP"] = "Restituisce una copia del testo in un diverso formato maiuscole/minuscole.";
messages["TEXT_CHARAT_FIRST"] = "prendi la prima lettera";
messages["TEXT_CHARAT_FROM_END"] = "prendi la lettera # dalla fine";
messages["TEXT_CHARAT_FROM_START"] = "prendi la lettera #";
messages["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
messages["TEXT_CHARAT_LAST"] = "prendi l'ultima lettera";
messages["TEXT_CHARAT_RANDOM"] = "prendi lettera casuale";
messages["TEXT_CHARAT_TAIL"] = "";  // untranslated
messages["TEXT_CHARAT_TITLE"] = "nel testo %1 %2";
messages["TEXT_CHARAT_TOOLTIP"] = "Restituisce la lettera nella posizione indicata.";
messages["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
messages["TEXT_COUNT_MESSAGE0"] = "conta %1 in %2";
messages["TEXT_COUNT_TOOLTIP"] = "Contare quante volte una parte di testo si ripete all'interno di qualche altro testo.";
messages["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Aggiungi un elemento al testo.";
messages["TEXT_CREATE_JOIN_TITLE_JOIN"] = "unisci";
messages["TEXT_CREATE_JOIN_TOOLTIP"] = "Aggiungi, rimuovi o riordina le sezioni per riconfigurare questo blocco testo.";
messages["TEXT_GET_SUBSTRING_END_FROM_END"] = "alla lettera # dalla fine";
messages["TEXT_GET_SUBSTRING_END_FROM_START"] = "alla lettera #";
messages["TEXT_GET_SUBSTRING_END_LAST"] = "all'ultima lettera";
messages["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
messages["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "nel testo";
messages["TEXT_GET_SUBSTRING_START_FIRST"] = "prendi sotto-stringa dalla prima lettera";
messages["TEXT_GET_SUBSTRING_START_FROM_END"] = "prendi sotto-stringa dalla lettera # dalla fine";
messages["TEXT_GET_SUBSTRING_START_FROM_START"] = "prendi sotto-stringa dalla lettera #";
messages["TEXT_GET_SUBSTRING_TAIL"] = "";  // untranslated
messages["TEXT_GET_SUBSTRING_TOOLTIP"] = "Restituisce la porzione di testo indicata.";
messages["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
messages["TEXT_INDEXOF_OPERATOR_FIRST"] = "trova la prima occorrenza del testo";
messages["TEXT_INDEXOF_OPERATOR_LAST"] = "trova l'ultima occorrenza del testo";
messages["TEXT_INDEXOF_TITLE"] = "nel testo %1 %2 %3";
messages["TEXT_INDEXOF_TOOLTIP"] = "Restituisce l'indice della prima occorrenza del primo testo all'interno del secondo testo. Restituisce %1 se il testo non viene trovato.";
messages["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
messages["TEXT_ISEMPTY_TITLE"] = "%1 è vuoto";
messages["TEXT_ISEMPTY_TOOLTIP"] = "Restituisce vero se il testo fornito è vuoto.";
messages["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
messages["TEXT_JOIN_TITLE_CREATEWITH"] = "crea testo con";
messages["TEXT_JOIN_TOOLTIP"] = "Crea un blocco di testo unendo un certo numero di elementi.";
messages["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
messages["TEXT_LENGTH_TITLE"] = "lunghezza di %1";
messages["TEXT_LENGTH_TOOLTIP"] = "Restituisce il numero di lettere (inclusi gli spazi) nel testo fornito.";
messages["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
messages["TEXT_PRINT_TITLE"] = "scrivi %1";
messages["TEXT_PRINT_TOOLTIP"] = "Scrive il testo, numero o altro valore indicato.";
messages["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
messages["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Richiedi un numero all'utente.";
messages["TEXT_PROMPT_TOOLTIP_TEXT"] = "Richiede del testo da parte dell'utente.";
messages["TEXT_PROMPT_TYPE_NUMBER"] = "richiedi numero con messaggio";
messages["TEXT_PROMPT_TYPE_TEXT"] = "richiedi testo con messaggio";
messages["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
messages["TEXT_REPLACE_MESSAGE0"] = "sostituisci %1 con %2 in %3";
messages["TEXT_REPLACE_TOOLTIP"] = "sostituisci tutte le occorrenze di un certo testo con qualche altro testo.";
messages["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";  // untranslated
messages["TEXT_REVERSE_MESSAGE0"] = "inverti %1";
messages["TEXT_REVERSE_TOOLTIP"] = "Inverte l'ordine dei caratteri nel testo.";
messages["TEXT_TEXT_HELPURL"] = "https://it.wikipedia.org/wiki/Stringa_(informatica)";
messages["TEXT_TEXT_TOOLTIP"] = "Una lettera, una parola o una linea di testo.";
messages["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
messages["TEXT_TRIM_OPERATOR_BOTH"] = "rimuovi spazi da entrambi gli estremi";
messages["TEXT_TRIM_OPERATOR_LEFT"] = "rimuovi spazi a sinistra";
messages["TEXT_TRIM_OPERATOR_RIGHT"] = "rimuovi spazi a destra";
messages["TEXT_TRIM_TOOLTIP"] = "Restituisce una copia del testo con gli spazi rimossi ad uno o entrambe le estremità.";
messages["TODAY"] = "Oggi";
messages["UNDO"] = "Annulla";
messages["UNNAMED_KEY"] = "senza nome";
messages["VARIABLES_DEFAULT_NAME"] = "elemento";
messages["VARIABLES_GET_CREATE_SET"] = "Crea 'imposta %1'";
messages["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
messages["VARIABLES_GET_TOOLTIP"] = "Restituisce il valore di una variabile.";
messages["VARIABLES_SET"] = "imposta %1 a %2";
messages["VARIABLES_SET_CREATE_GET"] = "Crea 'prendi %1'";
messages["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
messages["VARIABLES_SET_TOOLTIP"] = "Imposta questa variabile ad essere pari all'input.";
messages["VARIABLE_ALREADY_EXISTS"] = "Una variabile denominata '%1' esiste già.";
messages["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "Una variabile nominata '%1' esiste già per un altro tipo: '%2'.";
messages["WORKSPACE_ARIA_LABEL"] = "Area di lavoro di Blockly";
messages["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Scrivi qualcosa...";
messages["CONTROLS_FOREACH_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_FOR_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = messages["CONTROLS_IF_MSG_ELSEIF"];
messages["CONTROLS_IF_ELSE_TITLE_ELSE"] = messages["CONTROLS_IF_MSG_ELSE"];
messages["CONTROLS_IF_IF_TITLE_IF"] = messages["CONTROLS_IF_MSG_IF"];
messages["CONTROLS_IF_MSG_THEN"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_WHILEUNTIL_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["LISTS_CREATE_WITH_ITEM_TITLE"] = messages["VARIABLES_DEFAULT_NAME"];
messages["LISTS_GET_INDEX_HELPURL"] = messages["LISTS_INDEX_OF_HELPURL"];
messages["LISTS_GET_INDEX_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_INDEX_OF_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_SET_INDEX_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["MATH_CHANGE_TITLE_ITEM"] = messages["VARIABLES_DEFAULT_NAME"];
messages["PROCEDURES_DEFRETURN_COMMENT"] = messages["PROCEDURES_DEFNORETURN_COMMENT"];
messages["PROCEDURES_DEFRETURN_DO"] = messages["PROCEDURES_DEFNORETURN_DO"];
messages["PROCEDURES_DEFRETURN_PROCEDURE"] = messages["PROCEDURES_DEFNORETURN_PROCEDURE"];
messages["PROCEDURES_DEFRETURN_TITLE"] = messages["PROCEDURES_DEFNORETURN_TITLE"];
messages["TEXT_APPEND_VARIABLE"] = messages["VARIABLES_DEFAULT_NAME"];
messages["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = messages["VARIABLES_DEFAULT_NAME"];

messages["MATH_HUE"] = "230";
messages["LOOPS_HUE"] = "120";
messages["LISTS_HUE"] = "260";
messages["LOGIC_HUE"] = "210";
messages["VARIABLES_HUE"] = "330";
messages["TEXTS_HUE"] = "160";
messages["PROCEDURES_HUE"] = "290";
messages["COLOUR_HUE"] = "20";
messages["VARIABLES_DYNAMIC_HUE"] = "310";