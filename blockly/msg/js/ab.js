// This file was automatically generated.  Do not modify.

'use strict';

const messages = Object.create(null);

messages["ADD_COMMENT"] = "Иацҵатәуп ахцәажәара";
messages["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Can't delete the variable '%1' because it's part of the definition of the function '%2'";  // untranslated
messages["CHANGE_VALUE_TITLE"] = "Ишәыԥсах аҵакы";
messages["CLEAN_UP"] = "Иқәгатәуп аблокқәа";
messages["COLLAPSED_WARNINGS_WARNING"] = "Collapsed blocks contain warnings.";  // untranslated
messages["COLLAPSE_ALL"] = "Иеикәрҳәтәуп Аблокқәа";
messages["COLLAPSE_BLOCK"] = "Иеикәрҳәтәуп Аблокқәа";
messages["COLOUR_BLEND_COLOUR1"] = "аԥштәы 1";
messages["COLOUR_BLEND_COLOUR2"] = "аԥштәы 2";
messages["COLOUR_BLEND_HELPURL"] = "https://meyerweb.com/eric/tools/color-blend/#:::rgbp";  // untranslated
messages["COLOUR_BLEND_RATIO"] = "аԥштәы 1 ахәҭа";
messages["COLOUR_BLEND_TITLE"] = "еилаҵатәуп";
messages["COLOUR_BLEND_TOOLTIP"] = "Blends two colours together with a given ratio (0.0 - 1.0).";  // untranslated
messages["COLOUR_PICKER_HELPURL"] = "https://ab.wikipedia.org/wiki/Аԥштәы";
messages["COLOUR_PICKER_TOOLTIP"] = "Иалышәх аԥштәы";
messages["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
messages["COLOUR_RANDOM_TITLE"] = "иарбанзаалакь аԥштәы";
messages["COLOUR_RANDOM_TOOLTIP"] = "Иалнахуеит аԥштәы машәыршақә";
messages["COLOUR_RGB_BLUE"] = "жәҩангәԥштәы";
messages["COLOUR_RGB_GREEN"] = "аиаҵәа";
messages["COLOUR_RGB_HELPURL"] = "https://www.december.com/html/spec/colorpercompact.html";  // untranslated
messages["COLOUR_RGB_RED"] = "аҟаԥшь";
messages["COLOUR_RGB_TITLE"] = "аԥштәы аҟынтәи";
messages["COLOUR_RGB_TOOLTIP"] = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";  // untranslated
messages["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
messages["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "ацикл иҭыҵтәуп";
messages["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "ииастәуп ацикл анаҩстәи ашьаҿахьы";
messages["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Иааннакылоит абри ацикл.";
messages["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Skip the rest of this loop, and continue with the next iteration.";  // untranslated
messages["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Агәҽанҵара:Ари аблок ахархәара амоуп ацикл аҩныҵҟа мацара.";
messages["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
messages["CONTROLS_FOREACH_TITLE"] = "for each item %1 in list %2";  // untranslated
messages["CONTROLS_FOREACH_TOOLTIP"] = "For each item in a list, set the variable '%1' to the item, and then do some statements.";  // untranslated
messages["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
messages["CONTROLS_FOR_TITLE"] = "ацикл %1 ала %2 инаркны %3 рҟынӡа ашьаҿа %4";
messages["CONTROLS_FOR_TOOLTIP"] = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";  // untranslated
messages["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Иацнаҵоит аҭагыазаашьа аблок \"акәзар\" ахь";
messages["CONTROLS_IF_ELSE_TOOLTIP"] = "Add a final, catch-all condition to the if block.";  // untranslated
messages["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
messages["CONTROLS_IF_IF_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this if block.";  // untranslated
messages["CONTROLS_IF_MSG_ELSE"] = "акәымзар";
messages["CONTROLS_IF_MSG_ELSEIF"] = "акәымзар";
messages["CONTROLS_IF_MSG_IF"] = "акәзар";
messages["CONTROLS_IF_TOOLTIP_1"] = "Аҭагылазаашьа иашазар, инанагӡоит акомандақәа.";
messages["CONTROLS_IF_TOOLTIP_2"] = "Аҭагылазаашьа иашазар, инанагӡоит актәи аблок акомандақәа. Акәымзар инанагӡоит аҩбатәи аблок акомандақәа.";
messages["CONTROLS_IF_TOOLTIP_3"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";  // untranslated
messages["CONTROLS_IF_TOOLTIP_4"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";  // untranslated
messages["CONTROLS_REPEAT_HELPURL"] = "https://ab.wikipedia.org/wiki/Ацикл";
messages["CONTROLS_REPEAT_INPUT_DO"] = "инагӡатәуп";
messages["CONTROLS_REPEAT_TITLE"] = "инагӡалатәуп %1 - нтә";
messages["CONTROLS_REPEAT_TOOLTIP"] = "Инанагӡоит акомандақәа кырынтә";
messages["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
messages["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "инагӡалатәуп акәымзар";
messages["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "инагӡалатәуп акәзар";
messages["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Аҭагылазаашьа мцнаҵы, инанагӡалоит акомандақәа.";
messages["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Аҭагылазаашьа иашанаҵ, инанагӡалоит акомандақәа.";
messages["DELETE_ALL_BLOCKS"] = "Ианыхтәуп аблокқәа (%1) зегьы?";
messages["DELETE_BLOCK"] = "Ианыхтәуп аблок";
messages["DELETE_VARIABLE"] = "Ианыхтәуп аҽеиҭак '%1'";
messages["DELETE_VARIABLE_CONFIRMATION"] = "Delete %1 uses of the '%2' variable?";  // untranslated
messages["DELETE_X_BLOCKS"] = "Ианыхтәуп %1 блокк";
messages["DIALOG_CANCEL"] = "Аҟәыхра";
messages["DIALOG_OK"] = "OK";
messages["DISABLE_BLOCK"] = "Иаҿыхтәуп Аблок";
messages["DUPLICATE_BLOCK"] = "Акопиа ахыхтәуп";
messages["DUPLICATE_COMMENT"] = "Duplicate Comment";  // untranslated
messages["ENABLE_BLOCK"] = "Иаҿыхтәуп Аблокқәа";
messages["EXPAND_ALL"] = "Иаарԥштәуп Аблокқәа";
messages["EXPAND_BLOCK"] = "Иаарԥштәуп Аблокқәа";
messages["EXTERNAL_INPUTS"] = "External Inputs";  // untranslated
messages["HELP"] = "Ацхыраара";
messages["INLINE_INPUTS"] = "Inline Inputs";  // untranslated
messages["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
messages["LISTS_CREATE_EMPTY_TITLE"] = "иаԥцатәуп иҭацәу ахьӡынҵа";
messages["LISTS_CREATE_EMPTY_TOOLTIP"] = "Returns a list, of length 0, containing no data records";  // untranslated
messages["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "ахьӡынҵа";
messages["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";  // untranslated
messages["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
messages["LISTS_CREATE_WITH_INPUT_WITH"] = "иаԥҵатәуп ахьӡынҵа аҟынтәи";
messages["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Иацнаҵоит аелемент ахьӡынҵахьы";
messages["LISTS_CREATE_WITH_TOOLTIP"] = "Create a list with any number of items.";  // untranslated
messages["LISTS_GET_INDEX_FIRST"] = "актәи";
messages["LISTS_GET_INDEX_FROM_END"] = "№ анҵәамнҭа аҟынтәи";
messages["LISTS_GET_INDEX_FROM_START"] = "#";  // untranslated
messages["LISTS_GET_INDEX_GET"] = "игатәуп";
messages["LISTS_GET_INDEX_GET_REMOVE"] = "иалхны ианыхтәуп";
messages["LISTS_GET_INDEX_LAST"] = "аҵыхәтәантәи";
messages["LISTS_GET_INDEX_RANDOM"] = "иарбанзаалакь";
messages["LISTS_GET_INDEX_REMOVE"] = "ианыхтәуп";
messages["LISTS_GET_INDEX_TAIL"] = "";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Иҳанаҭоит ахьӡынҵа актәи аелемент.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Returns the item at the specified position in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Иҳанаҭоит ахьӡынҵа аҵыхәтәантәи аелемент.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Иҳанаҭоит ахьӡынҵа иарбанзаалакь елементк.";
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Removes and returns the first item in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Removes and returns the item at the specified position in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Removes and returns the last item in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Removes and returns a random item in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Ианнахәуеит ахьӡынҵа актәи аелемент.";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Removes the item at the specified position in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Ианнахәуеит ахьӡынҵа аҵыхәтәантәи аелемент.";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Ианнахәуеит ахьӡынҵа иарбанзаалакь елементк.";
messages["LISTS_GET_SUBLIST_END_FROM_END"] = "to # from end";  // untranslated
messages["LISTS_GET_SUBLIST_END_FROM_START"] = "№ ала";
messages["LISTS_GET_SUBLIST_END_LAST"] = "to last";  // untranslated
messages["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
messages["LISTS_GET_SUBLIST_START_FIRST"] = "get sub-list from first";  // untranslated
messages["LISTS_GET_SUBLIST_START_FROM_END"] = "get sub-list from # from end";  // untranslated
messages["LISTS_GET_SUBLIST_START_FROM_START"] = "get sub-list from #";  // untranslated
messages["LISTS_GET_SUBLIST_TAIL"] = "";  // untranslated
messages["LISTS_GET_SUBLIST_TOOLTIP"] = "Creates a copy of the specified portion of a list.";  // untranslated
messages["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 - аҵыхәтәантәи аелемент.";
messages["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 - актәи аелемент.";
messages["LISTS_INDEX_OF_FIRST"] = "find first occurrence of item";  // untranslated
messages["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
messages["LISTS_INDEX_OF_LAST"] = "find last occurrence of item";  // untranslated
messages["LISTS_INDEX_OF_TOOLTIP"] = "Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.";  // untranslated
messages["LISTS_INLIST"] = "ахьӡынҵа аҟны";
messages["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
messages["LISTS_ISEMPTY_TITLE"] = "%1 ҭацәуп";
messages["LISTS_ISEMPTY_TOOLTIP"] = "Иҳанаҭоит аиаша, ахьӡынҵа ҭацәызар.";
messages["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
messages["LISTS_LENGTH_TITLE"] = "аура %1";
messages["LISTS_LENGTH_TOOLTIP"] = "Иҳанаҭоит ахьӡынҵа аура.";
messages["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
messages["LISTS_REPEAT_TITLE"] = "create list with item %1 repeated %2 times";  // untranslated
messages["LISTS_REPEAT_TOOLTIP"] = "Creates a list consisting of the given value repeated the specified number of times.";  // untranslated
messages["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";  // untranslated
messages["LISTS_REVERSE_MESSAGE0"] = "reverse %1";  // untranslated
messages["LISTS_REVERSE_TOOLTIP"] = "Reverse a copy of a list.";  // untranslated
messages["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
messages["LISTS_SET_INDEX_INPUT_TO"] = "=";
messages["LISTS_SET_INDEX_INSERT"] = "ибжьаргылатәуп";
messages["LISTS_SET_INDEX_SET"] = "иаҭатәуп";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Inserts the item at the start of a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Inserts the item at the specified position in a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Иацнаҵоит аелемент ахьӡынҵа анҵәамҭахь.";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Inserts the item randomly in a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Sets the first item in a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Sets the item at the specified position in a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Sets the last item in a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Sets a random item in a list.";  // untranslated
messages["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";  // untranslated
messages["LISTS_SORT_ORDER_ASCENDING"] = "еиҵоу-еиҳауала";
messages["LISTS_SORT_ORDER_DESCENDING"] = "еиҳау-еиҵоуала";
messages["LISTS_SORT_TITLE"] = "еилыԥшаатәуп %1 %2 %3";
messages["LISTS_SORT_TOOLTIP"] = "Еилыԥшаатәуп ахьӡынҵа акопиа.";
messages["LISTS_SORT_TYPE_IGNORECASE"] = "alphabetic, ignore case";  // untranslated
messages["LISTS_SORT_TYPE_NUMERIC"] = "ахыԥхьаӡаратәи";
messages["LISTS_SORT_TYPE_TEXT"] = "алфавитла";
messages["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
messages["LISTS_SPLIT_LIST_FROM_TEXT"] = "make list from text";  // untranslated
messages["LISTS_SPLIT_TEXT_FROM_LIST"] = "еизгатәуп атеқст ахьӡынҵа аҟынтәи";
messages["LISTS_SPLIT_TOOLTIP_JOIN"] = "Join a list of texts into one text, separated by a delimiter.";  // untranslated
messages["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Split text into a list of texts, breaking at each delimiter.";  // untranslated
messages["LISTS_SPLIT_WITH_DELIMITER"] = "with delimiter";  // untranslated
messages["LOGIC_BOOLEAN_FALSE"] = "амц";
messages["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
messages["LOGIC_BOOLEAN_TOOLTIP"] = "Иҳанаҭоит аҵакы аиаша ма амц";
messages["LOGIC_BOOLEAN_TRUE"] = "аиаша";
messages["LOGIC_COMPARE_HELPURL"] = "https://ru.wikipedia.org/wiki/Аиҟарамра";
messages["LOGIC_COMPARE_TOOLTIP_EQ"] = "Иҳанаҭоит иҵоуроу аҵакы, иҭагалақәоу еиҟаразар.";
messages["LOGIC_COMPARE_TOOLTIP_GT"] = "Иҳанаҭоит аҵакы аиаша, актәи иҭагалоу аҩбатәи аасҭа еиҳазар.";
messages["LOGIC_COMPARE_TOOLTIP_GTE"] = "Иҳанаҭоит аҵакы аиаша, актәи иҭагалоу аҩбатәи аасҭа еиҳазар ма иаҟаразар.";
messages["LOGIC_COMPARE_TOOLTIP_LT"] = "Иҳанаҭоит иҵоуроу аҵакы, актәи иҭагалоу аҩбатәи аасҭа еиҵазар.";
messages["LOGIC_COMPARE_TOOLTIP_LTE"] = "Иҳанаҭоит аҵакы аиаша, актәи иҭагалоу аҩбатәи аасҭа еиҵазар ма иаҟаразар.";
messages["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Иҳанаҭоит иҵоуроу аҵакы, иҭагалақәоу еиҟарамзар.";
messages["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
messages["LOGIC_NEGATE_TITLE"] = "%1 акәӡам";
messages["LOGIC_NEGATE_TOOLTIP"] = "Иҳанаҭоит аҵакы аиаша, иҭагалоу мцызар. Иҳанаҭоит аҵакы амц, иҭагалоу иашазар.";
messages["LOGIC_NULL"] = "акагьы";
messages["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
messages["LOGIC_NULL_TOOLTIP"] = "Иҳанаҭоит акагьы";
messages["LOGIC_OPERATION_AND"] = "и";
messages["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
messages["LOGIC_OPERATION_OR"] = "ма";
messages["LOGIC_OPERATION_TOOLTIP_AND"] = "Иҳанаҭоит аҵакы аиаша, иҭагалоу аҩбагьы иашазар.";
messages["LOGIC_OPERATION_TOOLTIP_OR"] = "Иҳанаҭоит аҵакы аиаша, иҭагалоу руак иашазар.";
messages["LOGIC_TERNARY_CONDITION"] = "иалхтәуп ала";
messages["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
messages["LOGIC_TERNARY_IF_FALSE"] = "амц акәзар";
messages["LOGIC_TERNARY_IF_TRUE"] = "аиаша акәзар";
messages["LOGIC_TERNARY_TOOLTIP"] = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";  // untranslated
messages["MATH_ADDITION_SYMBOL"] = "+";  // untranslated
messages["MATH_ARITHMETIC_HELPURL"] = "https://ab.wikipedia.org/wiki/Арифметика";
messages["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Иҳанаҭоит ҩ-хыԥхьаӡарак реицҵалыҵ.";
messages["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Иҳанаҭоит ҩ-хыԥхьаӡарак ршалыҵ.";
messages["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Иҳанаҭоит ҩ-хыԥхьаӡарак реигырхалыҵ.";
messages["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Иҳанаҭоит ҩ-хыԥхьаӡарак рышьҭыхлыҵ.";
messages["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Return the first number raised to the power of the second number.";  // untranslated
messages["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";  // untranslated
messages["MATH_ATAN2_TITLE"] = "atan2 of X:%1 Y:%2";  // untranslated
messages["MATH_ATAN2_TOOLTIP"] = "Return the arctangent of point (X, Y) in degrees from -180 to 180.";  // untranslated
messages["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";  // untranslated
messages["MATH_CHANGE_TITLE"] = "иеизырҳатәуп %1 %2 рыла";
messages["MATH_CHANGE_TOOLTIP"] = "Иацнаҵоит ахыԥхьаӡара аҽеиҭак '%1' ахь.";
messages["MATH_CONSTANT_HELPURL"] = "https://ab.wikipedia.org/wiki/Аматематикатә_константа";
messages["MATH_CONSTANT_TOOLTIP"] = "Иҳанаҭооит аконстантақәа руак: π (3.141...), e (2.718...), φ (1.618...), sqrt(2) (1.414...), sqrt(½) (0.707...) ма ∞ (аҵыхәаԥҵәарадара).";
messages["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
messages["MATH_CONSTRAIN_TITLE"] = "constrain %1 low %2 high %3";  // untranslated
messages["MATH_CONSTRAIN_TOOLTIP"] = "Constrain a number to be between the specified limits (inclusive).";  // untranslated
messages["MATH_DIVISION_SYMBOL"] = "÷";  // untranslated
messages["MATH_IS_DIVISIBLE_BY"] = "ишоит ала";
messages["MATH_IS_EVEN"] = "еиҩшо";
messages["MATH_IS_NEGATIVE"] = "иҵоурам";
messages["MATH_IS_ODD"] = "еиҩымшо";
messages["MATH_IS_POSITIVE"] = "иҵоуроу";
messages["MATH_IS_PRIME"] = "имариоу";
messages["MATH_IS_TOOLTIP"] = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";  // untranslated
messages["MATH_IS_WHOLE"] = "аибга";
messages["MATH_MODULO_HELPURL"] = "https://ru.wikipedia.org/wiki/Ашара_цәынхала";
messages["MATH_MODULO_TITLE"] = "ацәынха %1 : %2";
messages["MATH_MODULO_TOOLTIP"] = "Иҳанаҭоит ацәынха ҩ-хыԥхьаӡарак ршараан.";
messages["MATH_MULTIPLICATION_SYMBOL"] = "×";  // untranslated
messages["MATH_NUMBER_HELPURL"] = "https://ab.wikipedia.org/wiki/Ахыԥхьаӡара";
messages["MATH_NUMBER_TOOLTIP"] = "Ахыԥхьаӡара.";
messages["MATH_ONLIST_HELPURL"] = "";  // untranslated
messages["MATH_ONLIST_OPERATOR_AVERAGE"] = "ахьӡынҵа арифметикатә бжьара";
messages["MATH_ONLIST_OPERATOR_MAX"] = "ахьӡынҵа аҟны иреиҳау";
messages["MATH_ONLIST_OPERATOR_MEDIAN"] = "ахьӡынҵа амедиана";
messages["MATH_ONLIST_OPERATOR_MIN"] = "ахьӡынҵа аҟны иреиҵо";
messages["MATH_ONLIST_OPERATOR_MODE"] = "ахьӡынҵа амода";
messages["MATH_ONLIST_OPERATOR_RANDOM"] = "ахьӡынҵа иарбанзаалакь аелемент";
messages["MATH_ONLIST_OPERATOR_STD_DEV"] = "standard deviation of list";  // untranslated
messages["MATH_ONLIST_OPERATOR_SUM"] = "ахьӡынҵа аицҵалыҵ";
messages["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Иҳанаҭоит ахьӡынҵа аҟны ахыԥхьаӡарақәа зегьы рарифметикатә бжьара.";
messages["MATH_ONLIST_TOOLTIP_MAX"] = "Иҳанаҭоит ахьӡынҵа аҟны иреиҳау ахыԥхьаӡара.";
messages["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Иҳанаҭоит ахьӡынҵа аҟны ахыԥхьаӡарақәа зегьы рмедиана.";
messages["MATH_ONLIST_TOOLTIP_MIN"] = "Иҳанаҭоит ахьӡынҵа аҟны иреицо ахыԥхьаӡара.";
messages["MATH_ONLIST_TOOLTIP_MODE"] = "Return a list of the most common item(s) in the list.";  // untranslated
messages["MATH_ONLIST_TOOLTIP_RANDOM"] = "Иҳанаҭоит ахьӡынҵа аҟны иарбанзаалакь елементк.";
messages["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Return the standard deviation of the list.";  // untranslated
messages["MATH_ONLIST_TOOLTIP_SUM"] = "Иҳанаҭоит ахьӡынҵа иаҵанакуа ахыԥхьаӡарақәа зегьы реицҵалыҵ.";
messages["MATH_POWER_SYMBOL"] = "^";  // untranslated
messages["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";  // untranslated
messages["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "иарбанзаалакь ахыԥхьашара 0 инаркны (иалаҵаны)  1 аҟынӡа";
messages["MATH_RANDOM_FLOAT_TOOLTIP"] = "Иҳанаҭоит иарбанзаалакь ахыԥхьаӡара 0.0 инаркны (иалаҵаны) 1.0 аҟынӡа.";
messages["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";  // untranslated
messages["MATH_RANDOM_INT_TITLE"] = "иарбанзаалакь еибгоу ахыԥхьаӡара %1 инаркны %2 нӡа";
messages["MATH_RANDOM_INT_TOOLTIP"] = "Return a random integer between the two specified limits, inclusive.";  // untranslated
messages["MATH_ROUND_HELPURL"] = "https://ab.wikipedia.org/wiki/Ахыркәшара";
messages["MATH_ROUND_OPERATOR_ROUND"] = "ихыркәшатәуп";
messages["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "ихыркәшатәуп еиҵоу ахь";
messages["MATH_ROUND_OPERATOR_ROUNDUP"] = "ихыркәшатәуп еиҳау ахь";
messages["MATH_ROUND_TOOLTIP"] = "Round a number up or down.";  // untranslated
messages["MATH_SINGLE_HELPURL"] = "https://en.wikipedia.org/wiki/Square_root";  // untranslated
messages["MATH_SINGLE_OP_ABSOLUTE"] = "амодуль";
messages["MATH_SINGLE_OP_ROOT"] = "square root";  // untranslated
messages["MATH_SINGLE_TOOLTIP_ABS"] = "Иҳанаҭоит ахыԥхьаӡара амодуль.";
messages["MATH_SINGLE_TOOLTIP_EXP"] = "Return e to the power of a number.";  // untranslated
messages["MATH_SINGLE_TOOLTIP_LN"] = "Иҳанаҭоит ахыԥхьаӡара иԥсабаратәу алогарифм.";
messages["MATH_SINGLE_TOOLTIP_LOG10"] = "Иҳанаҭоит ахыԥхьаӡара ажәабатә логарифм.";
messages["MATH_SINGLE_TOOLTIP_NEG"] = "Иҳанаҭоит иаҿагыло ахыԥхьаӡара.";
messages["MATH_SINGLE_TOOLTIP_POW10"] = "Return 10 to the power of a number.";  // untranslated
messages["MATH_SINGLE_TOOLTIP_ROOT"] = "Return the square root of a number.";  // untranslated
messages["MATH_SUBTRACTION_SYMBOL"] = "-";  // untranslated
messages["MATH_TRIG_ACOS"] = "acos";  // untranslated
messages["MATH_TRIG_ASIN"] = "asin";  // untranslated
messages["MATH_TRIG_ATAN"] = "atan";  // untranslated
messages["MATH_TRIG_COS"] = "cos";  // untranslated
messages["MATH_TRIG_HELPURL"] = "https://ab.wikipedia.org/wiki/Атригонометриатә_функциа";
messages["MATH_TRIG_SIN"] = "sin";  // untranslated
messages["MATH_TRIG_TAN"] = "tan";  // untranslated
messages["MATH_TRIG_TOOLTIP_ACOS"] = "Иҳанаҭоит арккосинус градусла.";
messages["MATH_TRIG_TOOLTIP_ASIN"] = "Иҳанаҭоит арксинус градусла.";
messages["MATH_TRIG_TOOLTIP_ATAN"] = "Иҳанаҭоит арктангенс градусла.";
messages["MATH_TRIG_TOOLTIP_COS"] = "Иҳанаҭоит акосинус градусла.";
messages["MATH_TRIG_TOOLTIP_SIN"] = "Иҳанаҭоит асинус градусла.";
messages["MATH_TRIG_TOOLTIP_TAN"] = "Иҳанаҭоит атангенс градусла.";
messages["NEW_COLOUR_VARIABLE"] = "Create colour variable...";  // untranslated
messages["NEW_NUMBER_VARIABLE"] = "Create number variable...";  // untranslated
messages["NEW_STRING_VARIABLE"] = "Create string variable...";  // untranslated
messages["NEW_VARIABLE"] = "Иаԥҵатәуп аҽеиҭак";
messages["NEW_VARIABLE_TITLE"] = "Аҽеиҭак ахьӡ ҿыц:";
messages["NEW_VARIABLE_TYPE_TITLE"] = "New variable type:";  // untranslated
messages["ORDINAL_NUMBER_SUFFIX"] = "";  // untranslated
messages["PROCEDURES_ALLOW_STATEMENTS"] = "аоператорқәа азин рыҭара";
messages["PROCEDURES_BEFORE_PARAMS"] = "аҟынтәи:";
messages["PROCEDURES_CALLNORETURN_HELPURL"] = "https://ru.wikipedia.org/wiki/Ацхыраагӡатә программа";
messages["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Run the user-defined function '%1'.";  // untranslated
messages["PROCEDURES_CALLRETURN_HELPURL"] = "https://ru.wikipedia.org/wiki/Ацхыраагӡатә программа";
messages["PROCEDURES_CALLRETURN_TOOLTIP"] = "Run the user-defined function '%1' and use its output.";  // untranslated
messages["PROCEDURES_CALL_BEFORE_PARAMS"] = "аҟынтәи:";
messages["PROCEDURES_CREATE_DO"] = "Иаԥҵатәуп ааԥхьара '%1'";
messages["PROCEDURES_DEFNORETURN_COMMENT"] = "Абри афункциа ахҳәа азыҟашәҵа...";
messages["PROCEDURES_DEFNORETURN_DO"] = "";  // untranslated
messages["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
messages["PROCEDURES_DEFNORETURN_PROCEDURE"] = "иҟаҵатәуп џьара акы";
messages["PROCEDURES_DEFNORETURN_TITLE"] = "азы";
messages["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Иаԥнаҵоит апроцедура, аҵакы ҳазымҭо.";
messages["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
messages["PROCEDURES_DEFRETURN_RETURN"] = "ирхынҳәтәуп";
messages["PROCEDURES_DEFRETURN_TOOLTIP"] = "Иаԥнаҵоит апроцедура, аҵакы ҳазҭо.";
messages["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Warning: This function has duplicate parameters.";  // untranslated
messages["PROCEDURES_HIGHLIGHT_DEF"] = "Highlight function definition";  // untranslated
messages["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
messages["PROCEDURES_IFRETURN_TOOLTIP"] = "Актәи аҵакы иашазар, иҳанаҭоит аҩбатәи аҵакы.";
messages["PROCEDURES_IFRETURN_WARNING"] = "Агәаҽанҵара: Ари аблок ахархәара ауеит афункциа аԥҵара аҟны.";
messages["PROCEDURES_MUTATORARG_TITLE"] = "апараметр ахьӡ:";
messages["PROCEDURES_MUTATORARG_TOOLTIP"] = "Add an input to the function.";  // untranslated
messages["PROCEDURES_MUTATORCONTAINER_TITLE"] = "апараметрқәа";
messages["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Add, remove, or reorder inputs to this function.";  // untranslated
messages["REDO"] = "Аиҭаҟаҵара";
messages["REMOVE_COMMENT"] = "Ианыхтәуп ахцәажәара";
messages["RENAME_VARIABLE"] = "Аҽеиҭак ахьӡ ԥсахтәуп";
messages["RENAME_VARIABLE_TITLE"] = "Аҽеиҭакқәа'%1' зегь рыхьӡ ԥсахтәуп аҟны:";
messages["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
messages["TEXT_APPEND_TITLE"] = "%1 ахьы иацҵатәуп атеқст %2";
messages["TEXT_APPEND_TOOLTIP"] = "Иацҵатәуп атеқст аҽеиҭак «%1» ахь.";
messages["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
messages["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "to lower case";  // untranslated
messages["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "to Title Case";  // untranslated
messages["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "to UPPER CASE";  // untranslated
messages["TEXT_CHANGECASE_TOOLTIP"] = "Return a copy of the text in a different case.";  // untranslated
messages["TEXT_CHARAT_FIRST"] = "игатәуп актәи анбан";
messages["TEXT_CHARAT_FROM_END"] = "игатәуп анбан № анҵәамҭа аҟынтәи";
messages["TEXT_CHARAT_FROM_START"] = "игатәуп анбан №";
messages["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
messages["TEXT_CHARAT_LAST"] = "игатәуп аҵыхәтәантәи анбан";
messages["TEXT_CHARAT_RANDOM"] = "игатәуп иарбанзаалакь нбанк";
messages["TEXT_CHARAT_TAIL"] = "";  // untranslated
messages["TEXT_CHARAT_TITLE"] = "атеқст %1 %2 аҟны";
messages["TEXT_CHARAT_TOOLTIP"] = "Иҳанаҭоит анбан иарбоу апозициа аҟны";
messages["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";  // untranslated
messages["TEXT_COUNT_MESSAGE0"] = "count %1 in %2";  // untranslated
messages["TEXT_COUNT_TOOLTIP"] = "Count how many times some text occurs within some other text.";  // untranslated
messages["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Иацҵатәуп аелемент атеқст ахь.";
messages["TEXT_CREATE_JOIN_TITLE_JOIN"] = "иеиԥшьтәуп";
messages["TEXT_CREATE_JOIN_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this text block.";  // untranslated
messages["TEXT_GET_SUBSTRING_END_FROM_END"] = "to letter # from end";  // untranslated
messages["TEXT_GET_SUBSTRING_END_FROM_START"] = "анбан № ала";
messages["TEXT_GET_SUBSTRING_END_LAST"] = "аҵыхәтәантәи анбан ала";
messages["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
messages["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "атеқст аҟны";
messages["TEXT_GET_SUBSTRING_START_FIRST"] = "get substring from first letter";  // untranslated
messages["TEXT_GET_SUBSTRING_START_FROM_END"] = "get substring from letter # from end";  // untranslated
messages["TEXT_GET_SUBSTRING_START_FROM_START"] = "get substring from letter #";  // untranslated
messages["TEXT_GET_SUBSTRING_TAIL"] = "";  // untranslated
messages["TEXT_GET_SUBSTRING_TOOLTIP"] = "Иҳанаҭоит атеқст аҟны иарбоу ахәҭа.";
messages["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
messages["TEXT_INDEXOF_OPERATOR_FIRST"] = "find first occurrence of text";  // untranslated
messages["TEXT_INDEXOF_OPERATOR_LAST"] = "find last occurrence of text";  // untranslated
messages["TEXT_INDEXOF_TITLE"] = "атеқст %1 %2 %3 аҟны";
messages["TEXT_INDEXOF_TOOLTIP"] = "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";  // untranslated
messages["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
messages["TEXT_ISEMPTY_TITLE"] = "%1 ҭацәуп";
messages["TEXT_ISEMPTY_TOOLTIP"] = "Иҳанаҭоит аҵакы аиаша, иҟоу атеқст ҭацәызар.";
messages["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
messages["TEXT_JOIN_TITLE_CREATEWITH"] = "иаԥҵатәуп атеқст аҟынтәи";
messages["TEXT_JOIN_TOOLTIP"] = "Create a piece of text by joining together any number of items.";  // untranslated
messages["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
messages["TEXT_LENGTH_TITLE"] = "аура %1";
messages["TEXT_LENGTH_TOOLTIP"] = "Иҳанаҭоит асимволқәа рхыԥхьаӡара (абжьажьқәа алаҵаны) иҟоу атеқст аҟны.";
messages["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
messages["TEXT_PRINT_TITLE"] = "икьыԥхьтәуп %1";
messages["TEXT_PRINT_TOOLTIP"] = "Иакьыԥхьуеит атеқст, ахыԥхьаӡара ма даҽа обиеқтк.";
messages["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
messages["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Prompt for user for a number.";  // untranslated
messages["TEXT_PROMPT_TOOLTIP_TEXT"] = "Prompt for user for some text.";  // untranslated
messages["TEXT_PROMPT_TYPE_NUMBER"] = "prompt for number with message";  // untranslated
messages["TEXT_PROMPT_TYPE_TEXT"] = "prompt for text with message";  // untranslated
messages["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";  // untranslated
messages["TEXT_REPLACE_MESSAGE0"] = "иԥсахтәуп %1 %2 ала %3 аҟны";
messages["TEXT_REPLACE_TOOLTIP"] = "Replace all occurances of some text within some other text.";  // untranslated
messages["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";  // untranslated
messages["TEXT_REVERSE_MESSAGE0"] = "reverse %1";  // untranslated
messages["TEXT_REVERSE_TOOLTIP"] = "Reverses the order of the characters in the text.";  // untranslated
messages["TEXT_TEXT_HELPURL"] = "https://ab.wikipedia.org/wiki/Ацәаҳәатә_хкы";
messages["TEXT_TEXT_TOOLTIP"] = "Анбан, ажәа ма ацәаҳәа атеқст аҟны.";
messages["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
messages["TEXT_TRIM_OPERATOR_BOTH"] = "trim spaces from both sides of";  // untranslated
messages["TEXT_TRIM_OPERATOR_LEFT"] = "trim spaces from left side of";  // untranslated
messages["TEXT_TRIM_OPERATOR_RIGHT"] = "trim spaces from right side of";  // untranslated
messages["TEXT_TRIM_TOOLTIP"] = "Return a copy of the text with spaces removed from one or both ends.";  // untranslated
messages["TODAY"] = "Иахьа";
messages["UNDO"] = "Иаҟәыхтәуп";
messages["UNNAMED_KEY"] = "unnamed";  // untranslated
messages["VARIABLES_DEFAULT_NAME"] = "аелемент";
messages["VARIABLES_GET_CREATE_SET"] = "Иаԥҵатәуп аблок \"иаҭатәуп %1\" азы";
messages["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
messages["VARIABLES_GET_TOOLTIP"] = "Иҳанаҭоит аҽеиҭак аҵакы.";
messages["VARIABLES_SET"] = "иаҭатәуп %1 = %2";
messages["VARIABLES_SET_CREATE_GET"] = "Create 'get %1'";  // untranslated
messages["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
messages["VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";  // untranslated
messages["VARIABLE_ALREADY_EXISTS"] = "Аҽеиҭак ахьӡ '%1' змоу ыҟоуп.";
messages["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "A variable named '%1' already exists for another type: '%2'.";  // untranslated
messages["WORKSPACE_ARIA_LABEL"] = "Blockly Workspace";  // untranslated
messages["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Say something...";  // untranslated
messages["CONTROLS_FOREACH_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_FOR_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = messages["CONTROLS_IF_MSG_ELSEIF"];
messages["CONTROLS_IF_ELSE_TITLE_ELSE"] = messages["CONTROLS_IF_MSG_ELSE"];
messages["CONTROLS_IF_IF_TITLE_IF"] = messages["CONTROLS_IF_MSG_IF"];
messages["CONTROLS_IF_MSG_THEN"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_WHILEUNTIL_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["LISTS_CREATE_WITH_ITEM_TITLE"] = messages["VARIABLES_DEFAULT_NAME"];
messages["LISTS_GET_INDEX_HELPURL"] = messages["LISTS_INDEX_OF_HELPURL"];
messages["LISTS_GET_INDEX_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_INDEX_OF_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_SET_INDEX_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["MATH_CHANGE_TITLE_ITEM"] = messages["VARIABLES_DEFAULT_NAME"];
messages["PROCEDURES_DEFRETURN_COMMENT"] = messages["PROCEDURES_DEFNORETURN_COMMENT"];
messages["PROCEDURES_DEFRETURN_DO"] = messages["PROCEDURES_DEFNORETURN_DO"];
messages["PROCEDURES_DEFRETURN_PROCEDURE"] = messages["PROCEDURES_DEFNORETURN_PROCEDURE"];
messages["PROCEDURES_DEFRETURN_TITLE"] = messages["PROCEDURES_DEFNORETURN_TITLE"];
messages["TEXT_APPEND_VARIABLE"] = messages["VARIABLES_DEFAULT_NAME"];
messages["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = messages["VARIABLES_DEFAULT_NAME"];

messages["MATH_HUE"] = "230";
messages["LOOPS_HUE"] = "120";
messages["LISTS_HUE"] = "260";
messages["LOGIC_HUE"] = "210";
messages["VARIABLES_HUE"] = "330";
messages["TEXTS_HUE"] = "160";
messages["PROCEDURES_HUE"] = "290";
messages["COLOUR_HUE"] = "20";
messages["VARIABLES_DYNAMIC_HUE"] = "310";