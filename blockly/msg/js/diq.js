// This file was automatically generated.  Do not modify.

'use strict';

const messages = Object.create(null);

messages["ADD_COMMENT"] = "Tefsir cı ke";
messages["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Vurniyaye '%1' nêşeno besteriyo, çıke parçeyê şınasnayışiyê fonksiyonê '%2'yo";
messages["CHANGE_VALUE_TITLE"] = "Erci bıvurne:";
messages["CLEAN_UP"] = "Blokan pak ke";
messages["COLLAPSED_WARNINGS_WARNING"] = "Collapsed blocks contain warnings.";  // untranslated
messages["COLLAPSE_ALL"] = "Blokan teng ke";
messages["COLLAPSE_BLOCK"] = "Bloki teng ke";
messages["COLOUR_BLEND_COLOUR1"] = "reng 1";
messages["COLOUR_BLEND_COLOUR2"] = "reng 2";
messages["COLOUR_BLEND_HELPURL"] = "https://meyerweb.com/eric/tools/color-blend/#:::rgbp";  // untranslated
messages["COLOUR_BLEND_RATIO"] = "nısbet";
messages["COLOUR_BLEND_TITLE"] = "tewde";
messages["COLOUR_BLEND_TOOLTIP"] = "Blends two colours together with a given ratio (0.0 - 1.0).";  // untranslated
messages["COLOUR_PICKER_HELPURL"] = "https://diq.wikipedia.org/wiki/Reng";
messages["COLOUR_PICKER_TOOLTIP"] = "Şıma palet ra yew reng weçinê.";
messages["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
messages["COLOUR_RANDOM_TITLE"] = "rengo rastameye";
messages["COLOUR_RANDOM_TOOLTIP"] = "Tesadufi yu ren bıweçin";
messages["COLOUR_RGB_BLUE"] = "kewe";
messages["COLOUR_RGB_GREEN"] = "kıho";
messages["COLOUR_RGB_HELPURL"] = "https://www.december.com/html/spec/colorpercompact.html";  // untranslated
messages["COLOUR_RGB_RED"] = "sur";
messages["COLOUR_RGB_TITLE"] = "komponentên rengan";
messages["COLOUR_RGB_TOOLTIP"] = "Şıma renganê sûr, aşıl u kohoy ra rengê do spesifik vırazê. Gani ê pêro 0 u 100 miyan de bıbê.";
messages["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
messages["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "Çerxen ra vec";
messages["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "Gama bin da çerxeni ra dewam ke";
messages["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Öujtewada çerxeni ra bıvıci";
messages["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Skip the rest of this loop, and continue with the next iteration.";  // untranslated
messages["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Diqat: No bloke şeno teyna yew çerxiyayış miyan de bıgırweyo.";
messages["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
messages["CONTROLS_FOREACH_TITLE"] = "Lista %2 de her item %1 rê";
messages["CONTROLS_FOREACH_TOOLTIP"] = "Yew lista de her item rê, varyansê '%1' itemi rê vırazê, u dıma tayê akerdışi (beyani) bıdê";
messages["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
messages["CONTROLS_FOR_TITLE"] = "Pê amarêno %1 %2 ra %3 rê , herg gam de %4 vurnayışi";
messages["CONTROLS_FOR_TOOLTIP"] = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";  // untranslated
messages["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Bloq da if'i rê yu şert dekerê de.";
messages["CONTROLS_IF_ELSE_TOOLTIP"] = "Add a final, catch-all condition to the if block.";  // untranslated
messages["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
messages["CONTROLS_IF_IF_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this if block.";  // untranslated
messages["CONTROLS_IF_MSG_ELSE"] = "eke çıniyo";
messages["CONTROLS_IF_MSG_ELSEIF"] = "eke nêyo";
messages["CONTROLS_IF_MSG_IF"] = "eke";
messages["CONTROLS_IF_TOOLTIP_1"] = "Eger yew vaye raşto, o taw şıma tayê akerdışi kerê.";
messages["CONTROLS_IF_TOOLTIP_2"] = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";  // untranslated
messages["CONTROLS_IF_TOOLTIP_3"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";  // untranslated
messages["CONTROLS_IF_TOOLTIP_4"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";  // untranslated
messages["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";
messages["CONTROLS_REPEAT_INPUT_DO"] = "bıke";
messages["CONTROLS_REPEAT_TITLE"] = "%1 fıni tekrar ke";
messages["CONTROLS_REPEAT_TOOLTIP"] = "Şıma tayêna reyi akerdışi kerê.";
messages["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
messages["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "hend tekrar ke";
messages["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "Tekrar kerdış de";
messages["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Yew erc xırabo se tay beyanati bıd";
messages["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Yew erc raşto se yu beyanat bıd.";
messages["DELETE_ALL_BLOCKS"] = "Pêro %1 bloki besteriyê?";
messages["DELETE_BLOCK"] = "Bloki bestere";
messages["DELETE_VARIABLE"] = "Şıma vırnaoğê '%1'i besterê";
messages["DELETE_VARIABLE_CONFIRMATION"] = "%1 ke vırnayışê '%2'i gırweneno, besteriyo?";
messages["DELETE_X_BLOCKS"] = "%1 blokan bestere";
messages["DIALOG_CANCEL"] = "Bıtexelne";
messages["DIALOG_OK"] = "TEMAM";
messages["DISABLE_BLOCK"] = "Çengi devre ra vec";
messages["DUPLICATE_BLOCK"] = "Zewnc";
messages["DUPLICATE_COMMENT"] = "Mışewreyo zewnc";
messages["ENABLE_BLOCK"] = "Bloki feal ke";
messages["EXPAND_ALL"] = "Blokan hera ke";
messages["EXPAND_BLOCK"] = "Bloki hera ke";
messages["EXTERNAL_INPUTS"] = "Cıkewtışê xarıciy";
messages["HELP"] = "Peşti";
messages["INLINE_INPUTS"] = "Cıkerdışê xomiyani";
messages["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
messages["LISTS_CREATE_EMPTY_TITLE"] = "lista venge vıraze";
messages["LISTS_CREATE_EMPTY_TOOLTIP"] = "Returns a list, of length 0, containing no data records";  // untranslated
messages["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "liste";
messages["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";  // untranslated
messages["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
messages["LISTS_CREATE_WITH_INPUT_WITH"] = "Liste ya vıraz";
messages["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Yew işaret liste ke.";
messages["LISTS_CREATE_WITH_TOOLTIP"] = "Create a list with any number of items.";  // untranslated
messages["LISTS_GET_INDEX_FIRST"] = "verên";
messages["LISTS_GET_INDEX_FROM_END"] = "# peyniye ra";
messages["LISTS_GET_INDEX_FROM_START"] = "#";  // untranslated
messages["LISTS_GET_INDEX_GET"] = "bıgê";
messages["LISTS_GET_INDEX_GET_REMOVE"] = "Bıgi u wedarne";
messages["LISTS_GET_INDEX_LAST"] = "peyên";
messages["LISTS_GET_INDEX_RANDOM"] = "raştameye";
messages["LISTS_GET_INDEX_REMOVE"] = "wedare";
messages["LISTS_GET_INDEX_TAIL"] = "";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Lista de obcey sıfteyıni tadano";
messages["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Returns the item at the specified position in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Lista de obcey peyêni tadano";
messages["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Lista de obcey raşt ameyayi tadano";
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Removes and returns the first item in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Removes and returns the item at the specified position in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Removes and returns the last item in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Removes and returns a random item in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Lista de obcey sıfteyıni wedareno";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Removes the item at the specified position in a list.";  // untranslated
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Lista de obcey peyêni wedareno";
messages["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Lista de obcey raşt ameyayi wedareno";
messages["LISTS_GET_SUBLIST_END_FROM_END"] = "Peyni # ra hetana";
messages["LISTS_GET_SUBLIST_END_FROM_START"] = "#'ya";
messages["LISTS_GET_SUBLIST_END_LAST"] = "Hetana pey";
messages["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
messages["LISTS_GET_SUBLIST_START_FIRST"] = "verênde lista bınêne bıgêrê";
messages["LISTS_GET_SUBLIST_START_FROM_END"] = "get sub-list from # from end";  // untranslated
messages["LISTS_GET_SUBLIST_START_FROM_START"] = "lista # ra lista bınêne bıgêrê";
messages["LISTS_GET_SUBLIST_TAIL"] = "";  // untranslated
messages["LISTS_GET_SUBLIST_TOOLTIP"] = "Creates a copy of the specified portion of a list.";  // untranslated
messages["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 objeyo peyên o";
messages["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 objeyo sıfteyên o";
messages["LISTS_INDEX_OF_FIRST"] = "vıraştışê işaretê verêni bıvêne";
messages["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
messages["LISTS_INDEX_OF_LAST"] = "vıraştışê nuşteyê verêni bıvêne";
messages["LISTS_INDEX_OF_TOOLTIP"] = "Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.";  // untranslated
messages["LISTS_INLIST"] = "lista de";
messages["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
messages["LISTS_ISEMPTY_TITLE"] = "%1 vengo";
messages["LISTS_ISEMPTY_TOOLTIP"] = "Eger kı lista venga se raşt keno çerğ";
messages["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
messages["LISTS_LENGTH_TITLE"] = "dergiya %1";
messages["LISTS_LENGTH_TOOLTIP"] = "Derganiya yu lister dano.";
messages["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
messages["LISTS_REPEAT_TITLE"] = "create list with item %1 repeated %2 times";  // untranslated
messages["LISTS_REPEAT_TOOLTIP"] = "Creates a list consisting of the given value repeated the specified number of times.";  // untranslated
messages["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";  // untranslated
messages["LISTS_REVERSE_MESSAGE0"] = "%1 dimlaşt kerê";
messages["LISTS_REVERSE_TOOLTIP"] = "Yew kopyaya yew lista dimlaşt kerê.";
messages["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
messages["LISTS_SET_INDEX_INPUT_TO"] = "zey";
messages["LISTS_SET_INDEX_INSERT"] = "De fi";
messages["LISTS_SET_INDEX_SET"] = "ca ke";
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Inserts the item at the start of a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Inserts the item at the specified position in a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Append the item to the end of a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Inserts the item randomly in a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Lista de obcey sıfteyıni eyar keno";
messages["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Sets the item at the specified position in a list.";  // untranslated
messages["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Lista de obcey peyêni eyar keno";
messages["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Lista de obcey raşt ameyayi eyar keno";
messages["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
messages["LISTS_SORT_ORDER_ASCENDING"] = "zeydıyen";
messages["LISTS_SORT_ORDER_DESCENDING"] = "Kemeyen";
messages["LISTS_SORT_TITLE"] = "%1 %2 %3 weçine";
messages["LISTS_SORT_TOOLTIP"] = "Kopyay yew lista rêz kerê";
messages["LISTS_SORT_TYPE_IGNORECASE"] = "alfabetik, nezeri mekerên";
messages["LISTS_SORT_TYPE_NUMERIC"] = "Amoriyal";
messages["LISTS_SORT_TYPE_TEXT"] = "Alfabetik";
messages["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
messages["LISTS_SPLIT_LIST_FROM_TEXT"] = "metini ra lista bıkerê";
messages["LISTS_SPLIT_TEXT_FROM_LIST"] = "Lista ra metin bıkerê";
messages["LISTS_SPLIT_TOOLTIP_JOIN"] = "Join a list of texts into one text, separated by a delimiter.";  // untranslated
messages["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Split text into a list of texts, breaking at each delimiter.";  // untranslated
messages["LISTS_SPLIT_WITH_DELIMITER"] = "Hududoxi ya";
messages["LOGIC_BOOLEAN_FALSE"] = "ğelet";
messages["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
messages["LOGIC_BOOLEAN_TOOLTIP"] = "Raşt yana çep erc dano";
messages["LOGIC_BOOLEAN_TRUE"] = "raşt";
messages["LOGIC_COMPARE_HELPURL"] = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
messages["LOGIC_COMPARE_TOOLTIP_EQ"] = "Debiyaye dı erci zey pêyêse ercê \"True\" dane.";
messages["LOGIC_COMPARE_TOOLTIP_GT"] = "Return true if the first input is greater than the second input.";  // untranslated
messages["LOGIC_COMPARE_TOOLTIP_GTE"] = "Return true if the first input is greater than or equal to the second input.";  // untranslated
messages["LOGIC_COMPARE_TOOLTIP_LT"] = "Return true if the first input is smaller than the second input.";  // untranslated
messages["LOGIC_COMPARE_TOOLTIP_LTE"] = "Return true if the first input is smaller than or equal to the second input.";  // untranslated
messages["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Return true if both inputs are not equal to each other.";  // untranslated
messages["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
messages["LOGIC_NEGATE_TITLE"] = "%1 niyo";
messages["LOGIC_NEGATE_TOOLTIP"] = "Returns true if the input is false. Returns false if the input is true.";  // untranslated
messages["LOGIC_NULL"] = "veng";
messages["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
messages["LOGIC_NULL_TOOLTIP"] = "Veng çarneno ra.";
messages["LOGIC_OPERATION_AND"] = "û";
messages["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
messages["LOGIC_OPERATION_OR"] = "ya zi";
messages["LOGIC_OPERATION_TOOLTIP_AND"] = "Eger her dı cıkewtışi zi raştê, şıma ageyrê.";
messages["LOGIC_OPERATION_TOOLTIP_OR"] = "Return true if at least one of the inputs is true.";  // untranslated
messages["LOGIC_TERNARY_CONDITION"] = "test";
messages["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
messages["LOGIC_TERNARY_IF_FALSE"] = "eke ğeleto";
messages["LOGIC_TERNARY_IF_TRUE"] = "eke raşto";
messages["LOGIC_TERNARY_TOOLTIP"] = "Şerta'test'i test keno.  Eger ke şert raşta se erca 'raşt'i çarneno, çepo se erca 'çep'  çarneno.";
messages["MATH_ADDITION_SYMBOL"] = "+";  // untranslated
messages["MATH_ARITHMETIC_HELPURL"] = "https://en.wikipedia.org/wiki/Aritmetik";
messages["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Arêdayışê dı amara tadê";
messages["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Letey iya dı amara tadê";
messages["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Ferqê dı amara tadê";
messages["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Reyina dı amara tadê";
messages["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Return the first number raised to the power of the second number.";  // untranslated
messages["MATH_ATAN2_HELPURL"] = "https://diq.wikipedia.org/wiki/Atan2";
messages["MATH_ATAN2_TITLE"] = "atan2, X:%1 Y:%2";
messages["MATH_ATAN2_TOOLTIP"] = "Return the arctangent of point (X, Y) in degrees from -180 to 180.";  // untranslated
messages["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
messages["MATH_CHANGE_TITLE"] = "%2, keno %1 vurneno";
messages["MATH_CHANGE_TOOLTIP"] = "Add a number to variable '%1'.";  // untranslated
messages["MATH_CONSTANT_HELPURL"] = "https://en.wikipedia.org/wiki/Mathematical_constant";
messages["MATH_CONSTANT_TOOLTIP"] = "Sabitanê wertağan ra yew açarne: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (bêpeyniye).";
messages["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
messages["MATH_CONSTRAIN_TITLE"] = "constrain %1 low %2 high %3";  // untranslated
messages["MATH_CONSTRAIN_TOOLTIP"] = "Constrain a number to be between the specified limits (inclusive).";  // untranslated
messages["MATH_DIVISION_SYMBOL"] = "÷";  // untranslated
messages["MATH_IS_DIVISIBLE_BY"] = "Leteyêno";
messages["MATH_IS_EVEN"] = "zewnco";
messages["MATH_IS_NEGATIVE"] = "negatifo";
messages["MATH_IS_ODD"] = "kıto";
messages["MATH_IS_POSITIVE"] = "pozitifo";
messages["MATH_IS_PRIME"] = "bıngehên";
messages["MATH_IS_TOOLTIP"] = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";  // untranslated
messages["MATH_IS_WHOLE"] = "tamo";
messages["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
messages["MATH_MODULO_TITLE"] = "%1 ÷ %2 ra menden";
messages["MATH_MODULO_TOOLTIP"] = "Mendeyan ra teqsimkerdışê dı amaran açarne.";
messages["MATH_MULTIPLICATION_SYMBOL"] = "×";  // untranslated
messages["MATH_NUMBER_HELPURL"] = "https://diq.wikipedia.org/wiki/Numre";
messages["MATH_NUMBER_TOOLTIP"] = "Yew numre.";
messages["MATH_ONLIST_HELPURL"] = "";  // untranslated
messages["MATH_ONLIST_OPERATOR_AVERAGE"] = "Averacê lista";
messages["MATH_ONLIST_OPERATOR_MAX"] = "Tewr gırdê lista";
messages["MATH_ONLIST_OPERATOR_MEDIAN"] = "Wertey lista";
messages["MATH_ONLIST_OPERATOR_MIN"] = "Tewr qıcê lista";
messages["MATH_ONLIST_OPERATOR_MODE"] = "listey modi";
messages["MATH_ONLIST_OPERATOR_RANDOM"] = "Raştamaye objeya lista";
messages["MATH_ONLIST_OPERATOR_STD_DEV"] = "Standart ferqıziya lista";
messages["MATH_ONLIST_OPERATOR_SUM"] = "koma liste";
messages["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Return the average (arithmetic mean) of the numeric values in the list.";  // untranslated
messages["MATH_ONLIST_TOOLTIP_MAX"] = "Lista de amara tewr qıckeke tadê";
messages["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Lista ra amara werti tadê";
messages["MATH_ONLIST_TOOLTIP_MIN"] = "Lista de tewr qıckek amar tadê";
messages["MATH_ONLIST_TOOLTIP_MODE"] = "Return a list of the most common item(s) in the list.";  // untranslated
messages["MATH_ONLIST_TOOLTIP_RANDOM"] = "Liste ra yew elemento rastameye açarne.";
messages["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Return the standard deviation of the list.";  // untranslated
messages["MATH_ONLIST_TOOLTIP_SUM"] = "Return the sum of all the numbers in the list.";  // untranslated
messages["MATH_POWER_SYMBOL"] = "^";  // untranslated
messages["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
messages["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "Raştamaye nimande amor";
messages["MATH_RANDOM_FLOAT_TOOLTIP"] = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";  // untranslated
messages["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
messages["MATH_RANDOM_INT_TITLE"] = "random integer from %1 to %2";  // untranslated
messages["MATH_RANDOM_INT_TOOLTIP"] = "Return a random integer between the two specified limits, inclusive.";  // untranslated
messages["MATH_ROUND_HELPURL"] = "https://en.wikipedia.org/wiki/Rounding";
messages["MATH_ROUND_OPERATOR_ROUND"] = "gılor ke";
messages["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "Loğê cêri ke";
messages["MATH_ROUND_OPERATOR_ROUNDUP"] = "Loğê cori ke";
messages["MATH_ROUND_TOOLTIP"] = "Yu amorer loğê cêri yana cori ke";
messages["MATH_SINGLE_HELPURL"] = "https://en.wikipedia.org/wiki/Square_root";
messages["MATH_SINGLE_OP_ABSOLUTE"] = "mutlaq";
messages["MATH_SINGLE_OP_ROOT"] = "karekok";
messages["MATH_SINGLE_TOOLTIP_ABS"] = "Ercê mutlaqê yew amarer tadê";
messages["MATH_SINGLE_TOOLTIP_EXP"] = "E quwetê yew amar tadano.";
messages["MATH_SINGLE_TOOLTIP_LN"] = "Tebi algoritmaya yew amarer tadê";
messages["MATH_SINGLE_TOOLTIP_LOG10"] = "Logaritmay 10i yew amari rê peyser tadê";
messages["MATH_SINGLE_TOOLTIP_NEG"] = "Nêrazibiyena yew amari açarne.";
messages["MATH_SINGLE_TOOLTIP_POW10"] = "Quweta yew amariya 10ıne tade.";
messages["MATH_SINGLE_TOOLTIP_ROOT"] = "Karerêçê yew amarer tadê";
messages["MATH_SUBTRACTION_SYMBOL"] = "-";  // untranslated
messages["MATH_TRIG_ACOS"] = "acos";  // untranslated
messages["MATH_TRIG_ASIN"] = "asin";  // untranslated
messages["MATH_TRIG_ATAN"] = "atan";  // untranslated
messages["MATH_TRIG_COS"] = "cos";  // untranslated
messages["MATH_TRIG_HELPURL"] = "https://diq.wikipedia.org/wiki/Fonksiyonê_trigonometriye";
messages["MATH_TRIG_SIN"] = "sin";  // untranslated
messages["MATH_TRIG_TAN"] = "tan";  // untranslated
messages["MATH_TRIG_TOOLTIP_ACOS"] = "Arkkosinusê yew amari açarne.";
messages["MATH_TRIG_TOOLTIP_ASIN"] = "Arksinusê yew amari açarne.";
messages["MATH_TRIG_TOOLTIP_ATAN"] = "Arktangensê yew amari açarne.";
messages["MATH_TRIG_TOOLTIP_COS"] = "Derecey yew kosinusi tadê (radyan niyo)";
messages["MATH_TRIG_TOOLTIP_SIN"] = "Sinusi yew derece tadê (radyan niyo)";
messages["MATH_TRIG_TOOLTIP_TAN"] = "Tanjantê yew derecey tadê (radyan niyo)";
messages["NEW_COLOUR_VARIABLE"] = "Vurriyayoğê rengi vıraze...";
messages["NEW_NUMBER_VARIABLE"] = "Vurriyayoğê amari vıraze...";
messages["NEW_STRING_VARIABLE"] = "Vurriyayoğê rêze vıraze...";
messages["NEW_VARIABLE"] = "Vuriyayeyo bıvıraz...";
messages["NEW_VARIABLE_TITLE"] = "Tewrê vurriyayoğê neweyi:";
messages["NEW_VARIABLE_TYPE_TITLE"] = "Tewrê vurriyayoğê neweyi:";
messages["ORDINAL_NUMBER_SUFFIX"] = "";  // untranslated
messages["PROCEDURES_ALLOW_STATEMENTS"] = "ifade rê mısade bıde";
messages["PROCEDURES_BEFORE_PARAMS"] = "ebe:";
messages["PROCEDURES_CALLNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
messages["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Run the user-defined function '%1'.";  // untranslated
messages["PROCEDURES_CALLRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
messages["PROCEDURES_CALLRETURN_TOOLTIP"] = "Run the user-defined function '%1' and use its output.";  // untranslated
messages["PROCEDURES_CALL_BEFORE_PARAMS"] = "ebe:";
messages["PROCEDURES_CREATE_DO"] = "'%1' vıraze";
messages["PROCEDURES_DEFNORETURN_COMMENT"] = "Nê fonksiyoni beyan ke...";
messages["PROCEDURES_DEFNORETURN_DO"] = "";  // untranslated
messages["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
messages["PROCEDURES_DEFNORETURN_PROCEDURE"] = "Çıyê bık";
messages["PROCEDURES_DEFNORETURN_TITLE"] = "rê";
messages["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Yew fonksiyono çap nêdate vırazeno";
messages["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
messages["PROCEDURES_DEFRETURN_RETURN"] = "peyser biya";
messages["PROCEDURES_DEFRETURN_TOOLTIP"] = "Yew fonksiyono çap daye vırazeno";
messages["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Tembe: Nê fonksiyoni de parametreyê dıleti estê.";
messages["PROCEDURES_HIGHLIGHT_DEF"] = "Highlight function definition";  // untranslated
messages["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
messages["PROCEDURES_IFRETURN_TOOLTIP"] = "If a value is true, then return a second value.";  // untranslated
messages["PROCEDURES_IFRETURN_WARNING"] = "Warning: This block may be used only within a function definition.";  // untranslated
messages["PROCEDURES_MUTATORARG_TITLE"] = "namey cıkewtışi:";
messages["PROCEDURES_MUTATORARG_TOOLTIP"] = "Funksiyoni rê yew cıkewtış ilawe ke.";
messages["PROCEDURES_MUTATORCONTAINER_TITLE"] = "cıkewtışi";
messages["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Add, remove, or reorder inputs to this function.";  // untranslated
messages["REDO"] = "Newe ke";
messages["REMOVE_COMMENT"] = "Tefsiri Wedare";
messages["RENAME_VARIABLE"] = "Vuriyayey fına name ke...";
messages["RENAME_VARIABLE_TITLE"] = "Pêro vırnayışê '%1' reyna name ke:";
messages["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
messages["TEXT_APPEND_TITLE"] = "rê %1 Metin dek %2";
messages["TEXT_APPEND_TOOLTIP"] = "Append some text to variable '%1'.";  // untranslated
messages["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
messages["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "Herfanê werdiyana";
messages["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "Ser herf gırd";
messages["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "HERFANÊ GIRDANA";
messages["TEXT_CHANGECASE_TOOLTIP"] = "Return a copy of the text in a different case.";  // untranslated
messages["TEXT_CHARAT_FIRST"] = "Herfa sıfti bıgi";
messages["TEXT_CHARAT_FROM_END"] = "herfa # peyêne ra bıgê";
messages["TEXT_CHARAT_FROM_START"] = "Herfa # bıgi";
messages["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
messages["TEXT_CHARAT_LAST"] = "herfa peyêne bıgê";
messages["TEXT_CHARAT_RANDOM"] = "Raştamaye yu herf bıgi";
messages["TEXT_CHARAT_TAIL"] = "";  // untranslated
messages["TEXT_CHARAT_TITLE"] = "metın de %1 %2";
messages["TEXT_CHARAT_TOOLTIP"] = "Şınasnaye pozisyon de yu herfer çerğ keno";
messages["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";  // untranslated
messages["TEXT_COUNT_MESSAGE0"] = "%1 miyan de %2 bımare";
messages["TEXT_COUNT_TOOLTIP"] = "Count how many times some text occurs within some other text.";  // untranslated
messages["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Yew işaret nuşteyi ke.";
messages["TEXT_CREATE_JOIN_TITLE_JOIN"] = "gıre de";
messages["TEXT_CREATE_JOIN_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this text block.";  // untranslated
messages["TEXT_GET_SUBSTRING_END_FROM_END"] = "heta herfa # peyêne";
messages["TEXT_GET_SUBSTRING_END_FROM_START"] = "heta herfa #";
messages["TEXT_GET_SUBSTRING_END_LAST"] = "heta herfa peyêne";
messages["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
messages["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "metın de";
messages["TEXT_GET_SUBSTRING_START_FIRST"] = "get substring from first letter";  // untranslated
messages["TEXT_GET_SUBSTRING_START_FROM_END"] = "rêza bınêne herfa # peyêne ra bıgê";
messages["TEXT_GET_SUBSTRING_START_FROM_START"] = "rêza bınêne herfa # ra bıgê";
messages["TEXT_GET_SUBSTRING_TAIL"] = "";  // untranslated
messages["TEXT_GET_SUBSTRING_TOOLTIP"] = "Tay letey metini çerğ keno";
messages["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
messages["TEXT_INDEXOF_OPERATOR_FIRST"] = "vıraştışê nuşteyê verêni bıvêne";
messages["TEXT_INDEXOF_OPERATOR_LAST"] = "vıraştışê nuşteyê verêni bıvêne";
messages["TEXT_INDEXOF_TITLE"] = "metın de %1 %2 %3";
messages["TEXT_INDEXOF_TOOLTIP"] = "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";  // untranslated
messages["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
messages["TEXT_ISEMPTY_TITLE"] = "%1 vengo";
messages["TEXT_ISEMPTY_TOOLTIP"] = "Returns true if the provided text is empty.";  // untranslated
messages["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
messages["TEXT_JOIN_TITLE_CREATEWITH"] = "ya metin vıraz";
messages["TEXT_JOIN_TOOLTIP"] = "Create a piece of text by joining together any number of items.";  // untranslated
messages["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
messages["TEXT_LENGTH_TITLE"] = "dergiya %1";
messages["TEXT_LENGTH_TOOLTIP"] = "Returns the number of letters (including spaces) in the provided text.";  // untranslated
messages["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
messages["TEXT_PRINT_TITLE"] = "%1 çap";
messages["TEXT_PRINT_TOOLTIP"] = "Print the specified text, number or other value.";  // untranslated
messages["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
messages["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Seba yew numreya karber persiyê";
messages["TEXT_PROMPT_TOOLTIP_TEXT"] = "Seba tay metinan karberi persiyê";
messages["TEXT_PROMPT_TYPE_NUMBER"] = "prompt for number with message";  // untranslated
messages["TEXT_PROMPT_TYPE_TEXT"] = "prompt for text with message";  // untranslated
messages["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";  // untranslated
messages["TEXT_REPLACE_MESSAGE0"] = "%1 heruna ra zerrey  %3 zerrey %2 ya bıvurne";
messages["TEXT_REPLACE_TOOLTIP"] = "Replace all occurances of some text within some other text.";  // untranslated
messages["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";  // untranslated
messages["TEXT_REVERSE_MESSAGE0"] = "karakteranê %1 weçarne";
messages["TEXT_REVERSE_TOOLTIP"] = "Reverses the order of the characters in the text.";  // untranslated
messages["TEXT_TEXT_HELPURL"] = "https://en.wikipedia.org/wiki/String_(computer_science)";
messages["TEXT_TEXT_TOOLTIP"] = "Yu herfa,  satır yana çekuya metini";
messages["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
messages["TEXT_TRIM_OPERATOR_BOTH"] = "trim spaces from both sides of";  // untranslated
messages["TEXT_TRIM_OPERATOR_LEFT"] = "trim spaces from left side of";  // untranslated
messages["TEXT_TRIM_OPERATOR_RIGHT"] = "trim spaces from right side of";  // untranslated
messages["TEXT_TRIM_TOOLTIP"] = "Return a copy of the text with spaces removed from one or both ends.";  // untranslated
messages["TODAY"] = "Ewro";
messages["UNDO"] = "Peyser bıgê";
messages["UNNAMED_KEY"] = "bêname";
messages["VARIABLES_DEFAULT_NAME"] = "unsur";
messages["VARIABLES_GET_CREATE_SET"] = "'%1 bınuse' vıraze";
messages["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
messages["VARIABLES_GET_TOOLTIP"] = "Ercê nê vurnayoği tadano";
messages["VARIABLES_SET"] = "%1 ra %2 rê eyar kerê";
messages["VARIABLES_SET_CREATE_GET"] = "'%1 bıwane' vıraze";
messages["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
messages["VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";  // untranslated
messages["VARIABLE_ALREADY_EXISTS"] = "Yew vırnayış be namey '%1' xora est.";
messages["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "Vurnaye be nameyê '%1' ra be babetê bini ra esto: '%2'";
messages["WORKSPACE_ARIA_LABEL"] = "Blockly Caygurenayışi";
messages["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Çiyê vace...";
messages["CONTROLS_FOREACH_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_FOR_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = messages["CONTROLS_IF_MSG_ELSEIF"];
messages["CONTROLS_IF_ELSE_TITLE_ELSE"] = messages["CONTROLS_IF_MSG_ELSE"];
messages["CONTROLS_IF_IF_TITLE_IF"] = messages["CONTROLS_IF_MSG_IF"];
messages["CONTROLS_IF_MSG_THEN"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["CONTROLS_WHILEUNTIL_INPUT_DO"] = messages["CONTROLS_REPEAT_INPUT_DO"];
messages["LISTS_CREATE_WITH_ITEM_TITLE"] = messages["VARIABLES_DEFAULT_NAME"];
messages["LISTS_GET_INDEX_HELPURL"] = messages["LISTS_INDEX_OF_HELPURL"];
messages["LISTS_GET_INDEX_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_INDEX_OF_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["LISTS_SET_INDEX_INPUT_IN_LIST"] = messages["LISTS_INLIST"];
messages["MATH_CHANGE_TITLE_ITEM"] = messages["VARIABLES_DEFAULT_NAME"];
messages["PROCEDURES_DEFRETURN_COMMENT"] = messages["PROCEDURES_DEFNORETURN_COMMENT"];
messages["PROCEDURES_DEFRETURN_DO"] = messages["PROCEDURES_DEFNORETURN_DO"];
messages["PROCEDURES_DEFRETURN_PROCEDURE"] = messages["PROCEDURES_DEFNORETURN_PROCEDURE"];
messages["PROCEDURES_DEFRETURN_TITLE"] = messages["PROCEDURES_DEFNORETURN_TITLE"];
messages["TEXT_APPEND_VARIABLE"] = messages["VARIABLES_DEFAULT_NAME"];
messages["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = messages["VARIABLES_DEFAULT_NAME"];

messages["MATH_HUE"] = "230";
messages["LOOPS_HUE"] = "120";
messages["LISTS_HUE"] = "260";
messages["LOGIC_HUE"] = "210";
messages["VARIABLES_HUE"] = "330";
messages["TEXTS_HUE"] = "160";
messages["PROCEDURES_HUE"] = "290";
messages["COLOUR_HUE"] = "20";
messages["VARIABLES_DYNAMIC_HUE"] = "310";